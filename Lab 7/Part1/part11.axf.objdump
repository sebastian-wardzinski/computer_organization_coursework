
D:/ece243/Lab 7/Part1/part11.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 08 08 00 00 0c 08 00 00 10 08 00 00     @...............
  30:	14 08 00 00 04 08 00 00 18 08 00 00 1c 08 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001b1 	bl	7a0 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000904 	.word	0x00000904

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d40 	.word	0x00000d40

00000124 <__cs3_heap_start_ptr>:
 124:	00000d68 	.word	0x00000d68

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d48 	.word	0x00000d48
 170:	00000d4b 	.word	0x00000d4b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d48 	.word	0x00000d48
 1bc:	00000d48 	.word	0x00000d48
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d48 	.word	0x00000d48
 200:	00000000 	.word	0x00000000
 204:	000008a8 	.word	0x000008a8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008a8 	.word	0x000008a8
 250:	00000d4c 	.word	0x00000d4c
 254:	00000908 	.word	0x00000908
 258:	00000000 	.word	0x00000000

0000025c <swap>:
void plot_pixel(int x, int y, short int line_color);


void swap(int* num1, int* num2){
	int temp;
	temp = *num1;
 25c:	e5903000 	ldr	r3, [r0]
	*num1 = *num2;
 260:	e5912000 	ldr	r2, [r1]
 264:	e5802000 	str	r2, [r0]
	*num2 = temp;
 268:	e5813000 	str	r3, [r1]
 26c:	e12fff1e 	bx	lr

00000270 <plot_pixel>:
		}
	}
}

void plot_pixel(int x, int y, short int line_color){
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 270:	e3003d64 	movw	r3, #3428	; 0xd64
 274:	e3403000 	movt	r3, #0
 278:	e5933000 	ldr	r3, [r3]
 27c:	e1a00080 	lsl	r0, r0, #1
 280:	e0831501 	add	r1, r3, r1, lsl #10
 284:	e18120b0 	strh	r2, [r1, r0]
 288:	e12fff1e 	bx	lr

0000028c <draw_line>:
			plot_pixel(x, y, 0); 	//color black
		}
	}
}

void draw_line(int x0, int y0, int x1, int y1, int color){
 28c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 290:	e24dd014 	sub	sp, sp, #20
 294:	e58d000c 	str	r0, [sp, #12]
 298:	e58d1008 	str	r1, [sp, #8]
 29c:	e58d2004 	str	r2, [sp, #4]
 2a0:	e58d3000 	str	r3, [sp]
	int temp;
	bool steep = abs(y1-y0) > abs(x1-x0);
 2a4:	e0613003 	rsb	r3, r1, r3
 2a8:	e3530000 	cmp	r3, #0
 2ac:	b2633000 	rsblt	r3, r3, #0
 2b0:	e0602002 	rsb	r2, r0, r2
 2b4:	e0228fc2 	eor	r8, r2, r2, asr #31
 2b8:	e0488fc2 	sub	r8, r8, r2, asr #31
 2bc:	e1530008 	cmp	r3, r8
 2c0:	d3a08000 	movle	r8, #0
 2c4:	c3a08001 	movgt	r8, #1
	int* x0ptr = &x0;
	int* x1ptr = &x1;
	int* y0ptr = &y0;
	int* y1ptr = &y1;
	
	if (steep){
 2c8:	e3580000 	cmp	r8, #0
 2cc:	0a000005 	beq	2e8 <draw_line+0x5c>
		swap(x0ptr,y0ptr);
 2d0:	e28d000c 	add	r0, sp, #12
 2d4:	e28d1008 	add	r1, sp, #8
 2d8:	ebffffdf 	bl	25c <swap>
		swap(x1ptr,y1ptr);
 2dc:	e28d0004 	add	r0, sp, #4
 2e0:	e1a0100d 	mov	r1, sp
 2e4:	ebffffdc 	bl	25c <swap>
	}
	if (x0>x1){
 2e8:	e59d3004 	ldr	r3, [sp, #4]
 2ec:	e59d200c 	ldr	r2, [sp, #12]
 2f0:	e1520003 	cmp	r2, r3
 2f4:	da000005 	ble	310 <draw_line+0x84>
		swap(x0ptr,x1ptr);
 2f8:	e28d000c 	add	r0, sp, #12
 2fc:	e28d1004 	add	r1, sp, #4
 300:	ebffffd5 	bl	25c <swap>
		swap(y0ptr,y1ptr);
 304:	e28d0008 	add	r0, sp, #8
 308:	e1a0100d 	mov	r1, sp
 30c:	ebffffd2 	bl	25c <swap>
	}
	
	int deltax = x1-x0;
 310:	e59d3004 	ldr	r3, [sp, #4]
 314:	e59d500c 	ldr	r5, [sp, #12]
 318:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1-y0);
 31c:	e59d2000 	ldr	r2, [sp]
 320:	e59d6008 	ldr	r6, [sp, #8]
 324:	e0667002 	rsb	r7, r6, r2
 328:	e3570000 	cmp	r7, #0
 32c:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax/2);
 330:	e0894fa9 	add	r4, r9, r9, lsr #31
 334:	e1a040c4 	asr	r4, r4, #1
 338:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	
	int y_step;
	
	if (y0 < y1){
		y_step = 1;
 33c:	e1520006 	cmp	r2, r6
 340:	d3e0b000 	mvnle	r11, #0
 344:	c3a0b001 	movgt	r11, #1
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
 348:	e1530005 	cmp	r3, r5
 34c:	ba00000e 	blt	38c <draw_line+0x100>
		if (steep) plot_pixel(y,x, color);
 350:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
 354:	e3580000 	cmp	r8, #0
 358:	11a00006 	movne	r0, r6
 35c:	11a01005 	movne	r1, r5
		else plot_pixel(x,y, color);
 360:	01a00005 	moveq	r0, r5
 364:	01a01006 	moveq	r1, r6
 368:	e1a0200a 	mov	r2, r10
 36c:	ebffffbf 	bl	270 <plot_pixel>
		
		error = error + deltay;
		if (error >= 0){
 370:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 374:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
 378:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
 37c:	e2855001 	add	r5, r5, #1
 380:	e59d3004 	ldr	r3, [sp, #4]
 384:	e1530005 	cmp	r3, r5
 388:	aafffff1 	bge	354 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
 38c:	e28dd014 	add	sp, sp, #20
 390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000394 <clear_screen>:
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 394:	e92d4070 	push	{r4, r5, r6, lr}
	for(int x = 0 ; x < 320 ; x++){
 398:	e3a05000 	mov	r5, #0
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 39c:	e1a06005 	mov	r6, r5
 3a0:	ea000009 	b	3cc <clear_screen+0x38>
	for(int x = 0 ; x < 320 ; x++){
		for(int y = 0 ; y < 240 ; y++){
			plot_pixel(x, y, 0); 	//color black
 3a4:	e1a00005 	mov	r0, r5
 3a8:	e1a01004 	mov	r1, r4
 3ac:	e1a02006 	mov	r2, r6
 3b0:	ebffffae 	bl	270 <plot_pixel>
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
	for(int x = 0 ; x < 320 ; x++){
		for(int y = 0 ; y < 240 ; y++){
 3b4:	e2844001 	add	r4, r4, #1
 3b8:	e35400f0 	cmp	r4, #240	; 0xf0
 3bc:	1afffff8 	bne	3a4 <clear_screen+0x10>
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
	for(int x = 0 ; x < 320 ; x++){
 3c0:	e2855001 	add	r5, r5, #1
 3c4:	e3550d05 	cmp	r5, #320	; 0x140
 3c8:	08bd8070 	popeq	{r4, r5, r6, pc}
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 3cc:	e1a04006 	mov	r4, r6
 3d0:	eafffff3 	b	3a4 <clear_screen+0x10>

000003d4 <main>:

void plot_pixel(int x, int y, short int line_color){
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

int main(void){
 3d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 3d8:	e24dd00c 	sub	sp, sp, #12
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    /* Read location of the pixel buffer from the pixel buffer controller */
    pixel_buffer_start = *pixel_ctrl_ptr;
 3dc:	e3033fff 	movw	r3, #16383	; 0x3fff
 3e0:	e34f3f20 	movt	r3, #65312	; 0xff20
 3e4:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 3e8:	e3003d64 	movw	r3, #3428	; 0xd64
 3ec:	e3403000 	movt	r3, #0
 3f0:	e5832000 	str	r2, [r3]

    clear_screen();
 3f4:	ebffffe6 	bl	394 <clear_screen>
    draw_line(0, 0, 150, 150, 0x001F);   // this line is blue
 3f8:	e3a0301f 	mov	r3, #31
 3fc:	e58d3000 	str	r3, [sp]
 400:	e3a00000 	mov	r0, #0
 404:	e1a01000 	mov	r1, r0
 408:	e3a02096 	mov	r2, #150	; 0x96
 40c:	e1a03002 	mov	r3, r2
 410:	ebffff9d 	bl	28c <draw_line>
    draw_line(150, 150, 319, 0, 0x07E0); // this line is green
 414:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 418:	e58d3000 	str	r3, [sp]
 41c:	e3a00096 	mov	r0, #150	; 0x96
 420:	e1a01000 	mov	r1, r0
 424:	e300213f 	movw	r2, #319	; 0x13f
 428:	e3a03000 	mov	r3, #0
 42c:	ebffff96 	bl	28c <draw_line>
    draw_line(0, 239, 319, 239, 0xF800); // this line is red
 430:	e3a03b3e 	mov	r3, #63488	; 0xf800
 434:	e58d3000 	str	r3, [sp]
 438:	e3a00000 	mov	r0, #0
 43c:	e3a010ef 	mov	r1, #239	; 0xef
 440:	e300213f 	movw	r2, #319	; 0x13f
 444:	e1a03001 	mov	r3, r1
 448:	ebffff8f 	bl	28c <draw_line>
    draw_line(319, 0, 0, 239, 0xF81F);   // this line is a pink color
 44c:	e30f381f 	movw	r3, #63519	; 0xf81f
 450:	e58d3000 	str	r3, [sp]
 454:	e300013f 	movw	r0, #319	; 0x13f
 458:	e3a01000 	mov	r1, #0
 45c:	e1a02001 	mov	r2, r1
 460:	e3a030ef 	mov	r3, #239	; 0xef
 464:	ebffff88 	bl	28c <draw_line>
	
	return 0;
 468:	e3a00000 	mov	r0, #0
 46c:	e28dd00c 	add	sp, sp, #12
 470:	e8bd8000 	ldmfd	sp!, {pc}

00000474 <atexit>:
 474:	e1a01000 	mov	r1, r0
 478:	e3a00000 	mov	r0, #0
 47c:	e92d4008 	push	{r3, lr}
 480:	e1a02000 	mov	r2, r0
 484:	e1a03000 	mov	r3, r0
 488:	eb00000e 	bl	4c8 <__register_exitproc>
 48c:	e8bd4008 	pop	{r3, lr}
 490:	e12fff1e 	bx	lr

00000494 <exit>:
 494:	e92d4008 	push	{r3, lr}
 498:	e3a01000 	mov	r1, #0
 49c:	e1a04000 	mov	r4, r0
 4a0:	eb000045 	bl	5bc <__call_exitprocs>
 4a4:	e59f3018 	ldr	r3, [pc, #24]	; 4c4 <exit+0x30>
 4a8:	e5930000 	ldr	r0, [r3]
 4ac:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4b0:	e3530000 	cmp	r3, #0
 4b4:	11a0e00f 	movne	lr, pc
 4b8:	112fff13 	bxne	r3
 4bc:	e1a00004 	mov	r0, r4
 4c0:	eb0000c9 	bl	7ec <_exit>
 4c4:	000008ac 	.word	0x000008ac

000004c8 <__register_exitproc>:
 4c8:	e59fc0e4 	ldr	r12, [pc, #228]	; 5b4 <__register_exitproc+0xec>
 4cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4d0:	e59c4000 	ldr	r4, [r12]
 4d4:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 4d8:	e35c0000 	cmp	r12, #0
 4dc:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 4e0:	e59c5004 	ldr	r5, [r12, #4]
 4e4:	0584c148 	streq	r12, [r4, #328]	; 0x148
 4e8:	e355001f 	cmp	r5, #31
 4ec:	e24dd010 	sub	sp, sp, #16
 4f0:	e1a06000 	mov	r6, r0
 4f4:	da000015 	ble	550 <__register_exitproc+0x88>
 4f8:	e59f00b8 	ldr	r0, [pc, #184]	; 5b8 <__register_exitproc+0xf0>
 4fc:	e3500000 	cmp	r0, #0
 500:	1a000001 	bne	50c <__register_exitproc+0x44>
 504:	e3e00000 	mvn	r0, #0
 508:	ea000018 	b	570 <__register_exitproc+0xa8>
 50c:	e3a00e19 	mov	r0, #400	; 0x190
 510:	e58d100c 	str	r1, [sp, #12]
 514:	e58d2008 	str	r2, [sp, #8]
 518:	e58d3004 	str	r3, [sp, #4]
 51c:	e320f000 	nop	{0}
 520:	e250c000 	subs	r12, r0, #0
 524:	e59d100c 	ldr	r1, [sp, #12]
 528:	e59d2008 	ldr	r2, [sp, #8]
 52c:	e59d3004 	ldr	r3, [sp, #4]
 530:	0afffff3 	beq	504 <__register_exitproc+0x3c>
 534:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 538:	e3a00000 	mov	r0, #0
 53c:	e58c0004 	str	r0, [r12, #4]
 540:	e58c5000 	str	r5, [r12]
 544:	e584c148 	str	r12, [r4, #328]	; 0x148
 548:	e58c0188 	str	r0, [r12, #392]	; 0x188
 54c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 550:	e3560000 	cmp	r6, #0
 554:	e59c4004 	ldr	r4, [r12, #4]
 558:	1a000007 	bne	57c <__register_exitproc+0xb4>
 55c:	e2843002 	add	r3, r4, #2
 560:	e2844001 	add	r4, r4, #1
 564:	e78c1103 	str	r1, [r12, r3, lsl #2]
 568:	e58c4004 	str	r4, [r12, #4]
 56c:	e3a00000 	mov	r0, #0
 570:	e28dd010 	add	sp, sp, #16
 574:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 578:	e12fff1e 	bx	lr
 57c:	e3a00001 	mov	r0, #1
 580:	e1a00410 	lsl	r0, r0, r4
 584:	e08c8104 	add	r8, r12, r4, lsl #2
 588:	e3560002 	cmp	r6, #2
 58c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 590:	e5883108 	str	r3, [r8, #264]	; 0x108
 594:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 598:	e1877000 	orr	r7, r7, r0
 59c:	01830000 	orreq	r0, r3, r0
 5a0:	e1a05008 	mov	r5, r8
 5a4:	e5882088 	str	r2, [r8, #136]	; 0x88
 5a8:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5ac:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5b0:	eaffffe9 	b	55c <__register_exitproc+0x94>
 5b4:	000008ac 	.word	0x000008ac
 5b8:	00000000 	.word	0x00000000

000005bc <__call_exitprocs>:
 5bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5c0:	e59f3168 	ldr	r3, [pc, #360]	; 730 <__call_exitprocs+0x174>
 5c4:	e5933000 	ldr	r3, [r3]
 5c8:	e24dd014 	sub	sp, sp, #20
 5cc:	e58d3004 	str	r3, [sp, #4]
 5d0:	e2833f52 	add	r3, r3, #328	; 0x148
 5d4:	e58d0008 	str	r0, [sp, #8]
 5d8:	e58d300c 	str	r3, [sp, #12]
 5dc:	e1a07001 	mov	r7, r1
 5e0:	e3a08001 	mov	r8, #1
 5e4:	e59d3004 	ldr	r3, [sp, #4]
 5e8:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 5ec:	e3560000 	cmp	r6, #0
 5f0:	e59db00c 	ldr	r11, [sp, #12]
 5f4:	0a000033 	beq	6c8 <__call_exitprocs+0x10c>
 5f8:	e5965004 	ldr	r5, [r6, #4]
 5fc:	e2554001 	subs	r4, r5, #1
 600:	5286a088 	addpl	r10, r6, #136	; 0x88
 604:	5285501f 	addpl	r5, r5, #31
 608:	508a5105 	addpl	r5, r10, r5, lsl #2
 60c:	5a000007 	bpl	630 <__call_exitprocs+0x74>
 610:	ea000029 	b	6bc <__call_exitprocs+0x100>
 614:	e5953000 	ldr	r3, [r5]
 618:	e1530007 	cmp	r3, r7
 61c:	0a000005 	beq	638 <__call_exitprocs+0x7c>
 620:	e2444001 	sub	r4, r4, #1
 624:	e3740001 	cmn	r4, #1
 628:	e2455004 	sub	r5, r5, #4
 62c:	0a000022 	beq	6bc <__call_exitprocs+0x100>
 630:	e3570000 	cmp	r7, #0
 634:	1afffff6 	bne	614 <__call_exitprocs+0x58>
 638:	e5963004 	ldr	r3, [r6, #4]
 63c:	e06a2005 	rsb	r2, r10, r5
 640:	e2433001 	sub	r3, r3, #1
 644:	e0862002 	add	r2, r6, r2
 648:	e1530004 	cmp	r3, r4
 64c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 650:	13a01000 	movne	r1, #0
 654:	05864004 	streq	r4, [r6, #4]
 658:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 65c:	e3530000 	cmp	r3, #0
 660:	0affffee 	beq	620 <__call_exitprocs+0x64>
 664:	e1a02418 	lsl	r2, r8, r4
 668:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 66c:	e1120001 	tst	r2, r1
 670:	e5969004 	ldr	r9, [r6, #4]
 674:	0a000016 	beq	6d4 <__call_exitprocs+0x118>
 678:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 67c:	e1120001 	tst	r2, r1
 680:	1a000016 	bne	6e0 <__call_exitprocs+0x124>
 684:	e59d0008 	ldr	r0, [sp, #8]
 688:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 68c:	e1a0e00f 	mov	lr, pc
 690:	e12fff13 	bx	r3
 694:	e5963004 	ldr	r3, [r6, #4]
 698:	e1530009 	cmp	r3, r9
 69c:	1affffd0 	bne	5e4 <__call_exitprocs+0x28>
 6a0:	e59b3000 	ldr	r3, [r11]
 6a4:	e1530006 	cmp	r3, r6
 6a8:	1affffcd 	bne	5e4 <__call_exitprocs+0x28>
 6ac:	e2444001 	sub	r4, r4, #1
 6b0:	e3740001 	cmn	r4, #1
 6b4:	e2455004 	sub	r5, r5, #4
 6b8:	1affffdc 	bne	630 <__call_exitprocs+0x74>
 6bc:	e59f1070 	ldr	r1, [pc, #112]	; 734 <__call_exitprocs+0x178>
 6c0:	e3510000 	cmp	r1, #0
 6c4:	1a000009 	bne	6f0 <__call_exitprocs+0x134>
 6c8:	e28dd014 	add	sp, sp, #20
 6cc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6d0:	e12fff1e 	bx	lr
 6d4:	e1a0e00f 	mov	lr, pc
 6d8:	e12fff13 	bx	r3
 6dc:	eaffffec 	b	694 <__call_exitprocs+0xd8>
 6e0:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 6e4:	e1a0e00f 	mov	lr, pc
 6e8:	e12fff13 	bx	r3
 6ec:	eaffffe8 	b	694 <__call_exitprocs+0xd8>
 6f0:	e5963004 	ldr	r3, [r6, #4]
 6f4:	e3530000 	cmp	r3, #0
 6f8:	e5963000 	ldr	r3, [r6]
 6fc:	1a000008 	bne	724 <__call_exitprocs+0x168>
 700:	e3530000 	cmp	r3, #0
 704:	0a000006 	beq	724 <__call_exitprocs+0x168>
 708:	e1a00006 	mov	r0, r6
 70c:	e58b3000 	str	r3, [r11]
 710:	e320f000 	nop	{0}
 714:	e59b6000 	ldr	r6, [r11]
 718:	e3560000 	cmp	r6, #0
 71c:	1affffb5 	bne	5f8 <__call_exitprocs+0x3c>
 720:	eaffffe8 	b	6c8 <__call_exitprocs+0x10c>
 724:	e1a0b006 	mov	r11, r6
 728:	e1a06003 	mov	r6, r3
 72c:	eafffff9 	b	718 <__call_exitprocs+0x15c>
 730:	000008ac 	.word	0x000008ac
 734:	00000000 	.word	0x00000000

00000738 <register_fini>:
 738:	e92d4008 	push	{r3, lr}
 73c:	e59f3010 	ldr	r3, [pc, #16]	; 754 <register_fini+0x1c>
 740:	e3530000 	cmp	r3, #0
 744:	159f000c 	ldrne	r0, [pc, #12]	; 758 <register_fini+0x20>
 748:	1bffff49 	blne	474 <atexit>
 74c:	e8bd4008 	pop	{r3, lr}
 750:	e12fff1e 	bx	lr
 754:	000008d4 	.word	0x000008d4
 758:	0000075c 	.word	0x0000075c

0000075c <__libc_fini_array>:
 75c:	e92d4038 	push	{r3, r4, r5, lr}
 760:	e59f5030 	ldr	r5, [pc, #48]	; 798 <__libc_fini_array+0x3c>
 764:	e59f4030 	ldr	r4, [pc, #48]	; 79c <__libc_fini_array+0x40>
 768:	e0654004 	rsb	r4, r5, r4
 76c:	e1b04144 	asrs	r4, r4, #2
 770:	10855104 	addne	r5, r5, r4, lsl #2
 774:	0a000004 	beq	78c <__libc_fini_array+0x30>
 778:	e5353004 	ldr	r3, [r5, #-4]!
 77c:	e1a0e00f 	mov	lr, pc
 780:	e12fff13 	bx	r3
 784:	e2544001 	subs	r4, r4, #1
 788:	1afffffa 	bne	778 <__libc_fini_array+0x1c>
 78c:	eb000050 	bl	8d4 <__libc_fini>
 790:	e8bd4038 	pop	{r3, r4, r5, lr}
 794:	e12fff1e 	bx	lr
 798:	000008ec 	.word	0x000008ec
 79c:	000008f0 	.word	0x000008f0

000007a0 <__cs3_premain>:
 7a0:	e92d4008 	push	{r3, lr}
 7a4:	eb00001d 	bl	820 <__libc_init_array>
 7a8:	e59f3030 	ldr	r3, [pc, #48]	; 7e0 <__cs3_premain+0x40>
 7ac:	e3530000 	cmp	r3, #0
 7b0:	15930000 	ldrne	r0, [r3]
 7b4:	01a00003 	moveq	r0, r3
 7b8:	e59f3024 	ldr	r3, [pc, #36]	; 7e4 <__cs3_premain+0x44>
 7bc:	e3530000 	cmp	r3, #0
 7c0:	15931000 	ldrne	r1, [r3]
 7c4:	01a01003 	moveq	r1, r3
 7c8:	e3a02000 	mov	r2, #0
 7cc:	ebffff00 	bl	3d4 <main>
 7d0:	e59f3010 	ldr	r3, [pc, #16]	; 7e8 <__cs3_premain+0x48>
 7d4:	e3530000 	cmp	r3, #0
 7d8:	1bffff2d 	blne	494 <exit>
 7dc:	eafffffe 	b	7dc <__cs3_premain+0x3c>
	...
 7e8:	00000494 	.word	0x00000494

000007ec <_exit>:
 7ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 7f0:	e3a00018 	mov	r0, #24
 7f4:	e59f1004 	ldr	r1, [pc, #4]	; 800 <_exit+0x14>
 7f8:	ef123456 	svc	0x00123456
 7fc:	eafffffe 	b	7fc <_exit+0x10>
 800:	00020026 	.word	0x00020026

00000804 <__cs3_isr_interrupt>:
 804:	eafffffe 	b	804 <__cs3_isr_interrupt>

00000808 <__cs3_isr_undef>:
 808:	eafffffe 	b	808 <__cs3_isr_undef>

0000080c <__cs3_isr_swi>:
 80c:	eafffffe 	b	80c <__cs3_isr_swi>

00000810 <__cs3_isr_pabort>:
 810:	eafffffe 	b	810 <__cs3_isr_pabort>

00000814 <__cs3_isr_dabort>:
 814:	eafffffe 	b	814 <__cs3_isr_dabort>

00000818 <__cs3_isr_irq>:
 818:	eafffffe 	b	818 <__cs3_isr_irq>

0000081c <__cs3_isr_fiq>:
 81c:	eafffffe 	b	81c <__cs3_isr_fiq>

00000820 <__libc_init_array>:
 820:	e92d4070 	push	{r4, r5, r6, lr}
 824:	e59f506c 	ldr	r5, [pc, #108]	; 898 <__libc_init_array+0x78>
 828:	e59f606c 	ldr	r6, [pc, #108]	; 89c <__libc_init_array+0x7c>
 82c:	e0656006 	rsb	r6, r5, r6
 830:	e1b06146 	asrs	r6, r6, #2
 834:	12455004 	subne	r5, r5, #4
 838:	13a04000 	movne	r4, #0
 83c:	0a000005 	beq	858 <__libc_init_array+0x38>
 840:	e5b53004 	ldr	r3, [r5, #4]!
 844:	e2844001 	add	r4, r4, #1
 848:	e1a0e00f 	mov	lr, pc
 84c:	e12fff13 	bx	r3
 850:	e1560004 	cmp	r6, r4
 854:	1afffff9 	bne	840 <__libc_init_array+0x20>
 858:	e59f5040 	ldr	r5, [pc, #64]	; 8a0 <__libc_init_array+0x80>
 85c:	e59f6040 	ldr	r6, [pc, #64]	; 8a4 <__libc_init_array+0x84>
 860:	e0656006 	rsb	r6, r5, r6
 864:	eb000012 	bl	8b4 <_init>
 868:	e1b06146 	asrs	r6, r6, #2
 86c:	12455004 	subne	r5, r5, #4
 870:	13a04000 	movne	r4, #0
 874:	0a000005 	beq	890 <__libc_init_array+0x70>
 878:	e5b53004 	ldr	r3, [r5, #4]!
 87c:	e2844001 	add	r4, r4, #1
 880:	e1a0e00f 	mov	lr, pc
 884:	e12fff13 	bx	r3
 888:	e1560004 	cmp	r6, r4
 88c:	1afffff9 	bne	878 <__libc_init_array+0x58>
 890:	e8bd4070 	pop	{r4, r5, r6, lr}
 894:	e12fff1e 	bx	lr
 898:	000008cc 	.word	0x000008cc
 89c:	000008cc 	.word	0x000008cc
 8a0:	000008cc 	.word	0x000008cc
 8a4:	000008d4 	.word	0x000008d4

Disassembly of section .rodata:

000008ac <_global_impure_ptr>:
 8ac:	00000918 00000043                       ....C...

000008b4 <_init>:
 8b4:	e1a0c00d 	mov	r12, sp
 8b8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8bc:	e24cb004 	sub	r11, r12, #4
 8c0:	e24bd028 	sub	sp, r11, #40	; 0x28
 8c4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8c8:	e12fff1e 	bx	lr

000008cc <__init_array_start>:
 8cc:	00000738 	.word	0x00000738

000008d0 <__frame_dummy_init_array_entry>:
 8d0:	00000208                                ....

000008d4 <__libc_fini>:
 8d4:	e1a0c00d 	mov	r12, sp
 8d8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8dc:	e24cb004 	sub	r11, r12, #4
 8e0:	e24bd028 	sub	sp, r11, #40	; 0x28
 8e4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8e8:	e12fff1e 	bx	lr

000008ec <__fini_array_start>:
 8ec:	000001c4 	.word	0x000001c4

000008f0 <__cs3_regions>:
	...
 8fc:	00000d48 	.word	0x00000d48
 900:	00000020 	.word	0x00000020

00000904 <__cs3_regions_end>:
 904:	00000000 	.word	0x00000000
