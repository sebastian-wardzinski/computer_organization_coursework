
D:/ece243/Lab 7/Part1/and.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 10 08 00 00 14 08 00 00 18 08 00 00     @...............
  30:	1c 08 00 00 0c 08 00 00 20 08 00 00 24 08 00 00     ........ ...$...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001b3 	bl	7a8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	0000090c 	.word	0x0000090c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d48 	.word	0x00000d48

00000124 <__cs3_heap_start_ptr>:
 124:	00000d70 	.word	0x00000d70

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d50 	.word	0x00000d50
 170:	00000d53 	.word	0x00000d53
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d50 	.word	0x00000d50
 1bc:	00000d50 	.word	0x00000d50
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d50 	.word	0x00000d50
 200:	00000000 	.word	0x00000000
 204:	000008b0 	.word	0x000008b0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008b0 	.word	0x000008b0
 250:	00000d54 	.word	0x00000d54
 254:	00000910 	.word	0x00000910
 258:	00000000 	.word	0x00000000

0000025c <draw_pixel>:
volatile int pixel_buffer_start;

void draw_pixel(int x, int y, short int line_color) {

  
  *((short int *) (pixel_buffer_start + (y << 10) + (x << 1))) = line_color;
 25c:	e3003d6c 	movw	r3, #3436	; 0xd6c
 260:	e3403000 	movt	r3, #0
 264:	e5933000 	ldr	r3, [r3]
 268:	e1a00080 	lsl	r0, r0, #1
 26c:	e0831501 	add	r1, r3, r1, lsl #10
 270:	e18120b0 	strh	r2, [r1, r0]
 274:	e12fff1e 	bx	lr

00000278 <clear_screen>:

}

void clear_screen () {
 278:	e92d4070 	push	{r4, r5, r6, lr}
  
  int a = 0;
  int b = 0;
  
  for (b = 0; b < 240; ++b) {
 27c:	e3a05000 	mov	r5, #0
  
  *((short int *) (pixel_buffer_start + (y << 10) + (x << 1))) = line_color;

}

void clear_screen () {
 280:	e1a06005 	mov	r6, r5
 284:	ea000009 	b	2b0 <clear_screen+0x38>
  int a = 0;
  int b = 0;
  
  for (b = 0; b < 240; ++b) {
    for (a = 0; a < 320; ++a) {
      draw_pixel(a,b,0);
 288:	e1a00004 	mov	r0, r4
 28c:	e1a01005 	mov	r1, r5
 290:	e1a02006 	mov	r2, r6
 294:	ebfffff0 	bl	25c <draw_pixel>
  
  int a = 0;
  int b = 0;
  
  for (b = 0; b < 240; ++b) {
    for (a = 0; a < 320; ++a) {
 298:	e2844001 	add	r4, r4, #1
 29c:	e3540d05 	cmp	r4, #320	; 0x140
 2a0:	1afffff8 	bne	288 <clear_screen+0x10>
void clear_screen () {
  
  int a = 0;
  int b = 0;
  
  for (b = 0; b < 240; ++b) {
 2a4:	e2855001 	add	r5, r5, #1
 2a8:	e35500f0 	cmp	r5, #240	; 0xf0
 2ac:	08bd8070 	popeq	{r4, r5, r6, pc}
  
  *((short int *) (pixel_buffer_start + (y << 10) + (x << 1))) = line_color;

}

void clear_screen () {
 2b0:	e1a04006 	mov	r4, r6
 2b4:	eafffff3 	b	288 <clear_screen+0x10>

000002b8 <swap>:
  }  
}

void swap (int* first, int* second) {

  int temp = *first;
 2b8:	e5903000 	ldr	r3, [r0]
  *first = *second;
 2bc:	e5912000 	ldr	r2, [r1]
 2c0:	e5802000 	str	r2, [r0]
  *second = temp;
 2c4:	e5813000 	str	r3, [r1]
 2c8:	e12fff1e 	bx	lr

000002cc <draw_line>:
  

}

void draw_line (int x0, int y0, int x1, int y1, int color) {
 2cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2d0:	e24dd014 	sub	sp, sp, #20
 2d4:	e58d000c 	str	r0, [sp, #12]
 2d8:	e58d1008 	str	r1, [sp, #8]
 2dc:	e58d2004 	str	r2, [sp, #4]
 2e0:	e58d3000 	str	r3, [sp]

  bool is_steep = abs(y1 - y0) > abs(x1 - x0);
 2e4:	e0613003 	rsb	r3, r1, r3
 2e8:	e3530000 	cmp	r3, #0
 2ec:	b2633000 	rsblt	r3, r3, #0
 2f0:	e0602002 	rsb	r2, r0, r2
 2f4:	e0228fc2 	eor	r8, r2, r2, asr #31
 2f8:	e0488fc2 	sub	r8, r8, r2, asr #31
 2fc:	e1530008 	cmp	r3, r8
 300:	d3a08000 	movle	r8, #0
 304:	c3a08001 	movgt	r8, #1
  int * x0_p = & x0;
  int * x1_p = & x1;
  int * y0_p = & y0;
  int * y1_p = & y1;
  
  if (is_steep) {
 308:	e3580000 	cmp	r8, #0
 30c:	0a000005 	beq	328 <draw_line+0x5c>

    swap(x0_p, y0_p);
 310:	e28d000c 	add	r0, sp, #12
 314:	e28d1008 	add	r1, sp, #8
 318:	ebffffe6 	bl	2b8 <swap>
    swap(x1_p, y1_p);
 31c:	e28d0004 	add	r0, sp, #4
 320:	e1a0100d 	mov	r1, sp
 324:	ebffffe3 	bl	2b8 <swap>
    
  }

  if (x0 > x1) {
 328:	e59d3004 	ldr	r3, [sp, #4]
 32c:	e59d200c 	ldr	r2, [sp, #12]
 330:	e1520003 	cmp	r2, r3
 334:	da000005 	ble	350 <draw_line+0x84>

    swap(x0_p, x1_p);
 338:	e28d000c 	add	r0, sp, #12
 33c:	e28d1004 	add	r1, sp, #4
 340:	ebffffdc 	bl	2b8 <swap>
    swap(y0_p, y1_p);
 344:	e28d0008 	add	r0, sp, #8
 348:	e1a0100d 	mov	r1, sp
 34c:	ebffffd9 	bl	2b8 <swap>
  
  }

    int dx = x1 - x0;
 350:	e59d3004 	ldr	r3, [sp, #4]
 354:	e59d500c 	ldr	r5, [sp, #12]
 358:	e0659003 	rsb	r9, r5, r3
    int dy = abs(y1 - y0);
 35c:	e59d2000 	ldr	r2, [sp]
 360:	e59d6008 	ldr	r6, [sp, #8]
 364:	e0667002 	rsb	r7, r6, r2
 368:	e3570000 	cmp	r7, #0
 36c:	b2677000 	rsblt	r7, r7, #0
    int error = -1 * (dx/2);
 370:	e0894fa9 	add	r4, r9, r9, lsr #31
 374:	e1a040c4 	asr	r4, r4, #1
 378:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step = 0;
  
    int x = x0;
    
    if (y0 < y1) y_step = 1;
 37c:	e1520006 	cmp	r2, r6
 380:	d3e0b000 	mvnle	r11, #0
 384:	c3a0b001 	movgt	r11, #1
    else y_step = -1;

  for (x = x0; x < x1 + 1; ++x) {
 388:	e2833001 	add	r3, r3, #1
 38c:	e1550003 	cmp	r5, r3
 390:	aa00000f 	bge	3d4 <draw_line+0x108>
    if (is_steep) 
      draw_pixel (y,x,color);
 394:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    
    if (y0 < y1) y_step = 1;
    else y_step = -1;

  for (x = x0; x < x1 + 1; ++x) {
    if (is_steep) 
 398:	e3580000 	cmp	r8, #0
      draw_pixel (y,x,color);
 39c:	11a00006 	movne	r0, r6
 3a0:	11a01005 	movne	r1, r5
    else
      draw_pixel (x,y,color);
 3a4:	01a00005 	moveq	r0, r5
 3a8:	01a01006 	moveq	r1, r6
 3ac:	e1a0200a 	mov	r2, r10
 3b0:	ebffffa9 	bl	25c <draw_pixel>

    error += dy;

    if (error >= 0) {
 3b4:	e0944007 	adds	r4, r4, r7
      y += y_step;
 3b8:	5086600b 	addpl	r6, r6, r11
      error -= dx;
 3bc:	50694004 	rsbpl	r4, r9, r4
    int x = x0;
    
    if (y0 < y1) y_step = 1;
    else y_step = -1;

  for (x = x0; x < x1 + 1; ++x) {
 3c0:	e2855001 	add	r5, r5, #1
 3c4:	e59d3004 	ldr	r3, [sp, #4]
 3c8:	e2833001 	add	r3, r3, #1
 3cc:	e1530005 	cmp	r3, r5
 3d0:	cafffff0 	bgt	398 <draw_line+0xcc>
    if (error >= 0) {
      y += y_step;
      error -= dx;
    }
  }
}
 3d4:	e28dd014 	add	sp, sp, #20
 3d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003dc <main>:

int main(void) {
 3dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 3e0:	e24dd00c 	sub	sp, sp, #12
  volatile int * pixel_ctrl_ptr = (int *)0xFF203020;  
  /* Read location of the pixel buffer from the pixel buffer controller */
  pixel_buffer_start = *pixel_ctrl_ptr;
 3e4:	e3033fff 	movw	r3, #16383	; 0x3fff
 3e8:	e34f3f20 	movt	r3, #65312	; 0xff20
 3ec:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 3f0:	e3003d6c 	movw	r3, #3436	; 0xd6c
 3f4:	e3403000 	movt	r3, #0
 3f8:	e5832000 	str	r2, [r3]
  
  clear_screen();
 3fc:	ebffff9d 	bl	278 <clear_screen>
  
  draw_line(0, 0, 150, 150, 0x001F);                  // this line is blue
 400:	e3a0301f 	mov	r3, #31
 404:	e58d3000 	str	r3, [sp]
 408:	e3a00000 	mov	r0, #0
 40c:	e1a01000 	mov	r1, r0
 410:	e3a02096 	mov	r2, #150	; 0x96
 414:	e1a03002 	mov	r3, r2
 418:	ebffffab 	bl	2cc <draw_line>
  draw_line(150, 150, 319, 0, 0x07E0);                // this line is green
 41c:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 420:	e58d3000 	str	r3, [sp]
 424:	e3a00096 	mov	r0, #150	; 0x96
 428:	e1a01000 	mov	r1, r0
 42c:	e300213f 	movw	r2, #319	; 0x13f
 430:	e3a03000 	mov	r3, #0
 434:	ebffffa4 	bl	2cc <draw_line>
  draw_line(0, 239, 319, 239, 0xF800);                // this line is red
 438:	e3a03b3e 	mov	r3, #63488	; 0xf800
 43c:	e58d3000 	str	r3, [sp]
 440:	e3a00000 	mov	r0, #0
 444:	e3a010ef 	mov	r1, #239	; 0xef
 448:	e300213f 	movw	r2, #319	; 0x13f
 44c:	e1a03001 	mov	r3, r1
 450:	ebffff9d 	bl	2cc <draw_line>
  draw_line(319, 0, 0, 239, 0xF81F);                  // this line is a pink color
 454:	e30f381f 	movw	r3, #63519	; 0xf81f
 458:	e58d3000 	str	r3, [sp]
 45c:	e300013f 	movw	r0, #319	; 0x13f
 460:	e3a01000 	mov	r1, #0
 464:	e1a02001 	mov	r2, r1
 468:	e3a030ef 	mov	r3, #239	; 0xef
 46c:	ebffff96 	bl	2cc <draw_line>

  return 0;

}
 470:	e3a00000 	mov	r0, #0
 474:	e28dd00c 	add	sp, sp, #12
 478:	e8bd8000 	ldmfd	sp!, {pc}

0000047c <atexit>:
 47c:	e1a01000 	mov	r1, r0
 480:	e3a00000 	mov	r0, #0
 484:	e92d4008 	push	{r3, lr}
 488:	e1a02000 	mov	r2, r0
 48c:	e1a03000 	mov	r3, r0
 490:	eb00000e 	bl	4d0 <__register_exitproc>
 494:	e8bd4008 	pop	{r3, lr}
 498:	e12fff1e 	bx	lr

0000049c <exit>:
 49c:	e92d4008 	push	{r3, lr}
 4a0:	e3a01000 	mov	r1, #0
 4a4:	e1a04000 	mov	r4, r0
 4a8:	eb000045 	bl	5c4 <__call_exitprocs>
 4ac:	e59f3018 	ldr	r3, [pc, #24]	; 4cc <exit+0x30>
 4b0:	e5930000 	ldr	r0, [r3]
 4b4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4b8:	e3530000 	cmp	r3, #0
 4bc:	11a0e00f 	movne	lr, pc
 4c0:	112fff13 	bxne	r3
 4c4:	e1a00004 	mov	r0, r4
 4c8:	eb0000c9 	bl	7f4 <_exit>
 4cc:	000008b4 	.word	0x000008b4

000004d0 <__register_exitproc>:
 4d0:	e59fc0e4 	ldr	r12, [pc, #228]	; 5bc <__register_exitproc+0xec>
 4d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4d8:	e59c4000 	ldr	r4, [r12]
 4dc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 4e0:	e35c0000 	cmp	r12, #0
 4e4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 4e8:	e59c5004 	ldr	r5, [r12, #4]
 4ec:	0584c148 	streq	r12, [r4, #328]	; 0x148
 4f0:	e355001f 	cmp	r5, #31
 4f4:	e24dd010 	sub	sp, sp, #16
 4f8:	e1a06000 	mov	r6, r0
 4fc:	da000015 	ble	558 <__register_exitproc+0x88>
 500:	e59f00b8 	ldr	r0, [pc, #184]	; 5c0 <__register_exitproc+0xf0>
 504:	e3500000 	cmp	r0, #0
 508:	1a000001 	bne	514 <__register_exitproc+0x44>
 50c:	e3e00000 	mvn	r0, #0
 510:	ea000018 	b	578 <__register_exitproc+0xa8>
 514:	e3a00e19 	mov	r0, #400	; 0x190
 518:	e58d100c 	str	r1, [sp, #12]
 51c:	e58d2008 	str	r2, [sp, #8]
 520:	e58d3004 	str	r3, [sp, #4]
 524:	e320f000 	nop	{0}
 528:	e250c000 	subs	r12, r0, #0
 52c:	e59d100c 	ldr	r1, [sp, #12]
 530:	e59d2008 	ldr	r2, [sp, #8]
 534:	e59d3004 	ldr	r3, [sp, #4]
 538:	0afffff3 	beq	50c <__register_exitproc+0x3c>
 53c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 540:	e3a00000 	mov	r0, #0
 544:	e58c0004 	str	r0, [r12, #4]
 548:	e58c5000 	str	r5, [r12]
 54c:	e584c148 	str	r12, [r4, #328]	; 0x148
 550:	e58c0188 	str	r0, [r12, #392]	; 0x188
 554:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 558:	e3560000 	cmp	r6, #0
 55c:	e59c4004 	ldr	r4, [r12, #4]
 560:	1a000007 	bne	584 <__register_exitproc+0xb4>
 564:	e2843002 	add	r3, r4, #2
 568:	e2844001 	add	r4, r4, #1
 56c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 570:	e58c4004 	str	r4, [r12, #4]
 574:	e3a00000 	mov	r0, #0
 578:	e28dd010 	add	sp, sp, #16
 57c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 580:	e12fff1e 	bx	lr
 584:	e3a00001 	mov	r0, #1
 588:	e1a00410 	lsl	r0, r0, r4
 58c:	e08c8104 	add	r8, r12, r4, lsl #2
 590:	e3560002 	cmp	r6, #2
 594:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 598:	e5883108 	str	r3, [r8, #264]	; 0x108
 59c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5a0:	e1877000 	orr	r7, r7, r0
 5a4:	01830000 	orreq	r0, r3, r0
 5a8:	e1a05008 	mov	r5, r8
 5ac:	e5882088 	str	r2, [r8, #136]	; 0x88
 5b0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5b4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5b8:	eaffffe9 	b	564 <__register_exitproc+0x94>
 5bc:	000008b4 	.word	0x000008b4
 5c0:	00000000 	.word	0x00000000

000005c4 <__call_exitprocs>:
 5c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5c8:	e59f3168 	ldr	r3, [pc, #360]	; 738 <__call_exitprocs+0x174>
 5cc:	e5933000 	ldr	r3, [r3]
 5d0:	e24dd014 	sub	sp, sp, #20
 5d4:	e58d3004 	str	r3, [sp, #4]
 5d8:	e2833f52 	add	r3, r3, #328	; 0x148
 5dc:	e58d0008 	str	r0, [sp, #8]
 5e0:	e58d300c 	str	r3, [sp, #12]
 5e4:	e1a07001 	mov	r7, r1
 5e8:	e3a08001 	mov	r8, #1
 5ec:	e59d3004 	ldr	r3, [sp, #4]
 5f0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 5f4:	e3560000 	cmp	r6, #0
 5f8:	e59db00c 	ldr	r11, [sp, #12]
 5fc:	0a000033 	beq	6d0 <__call_exitprocs+0x10c>
 600:	e5965004 	ldr	r5, [r6, #4]
 604:	e2554001 	subs	r4, r5, #1
 608:	5286a088 	addpl	r10, r6, #136	; 0x88
 60c:	5285501f 	addpl	r5, r5, #31
 610:	508a5105 	addpl	r5, r10, r5, lsl #2
 614:	5a000007 	bpl	638 <__call_exitprocs+0x74>
 618:	ea000029 	b	6c4 <__call_exitprocs+0x100>
 61c:	e5953000 	ldr	r3, [r5]
 620:	e1530007 	cmp	r3, r7
 624:	0a000005 	beq	640 <__call_exitprocs+0x7c>
 628:	e2444001 	sub	r4, r4, #1
 62c:	e3740001 	cmn	r4, #1
 630:	e2455004 	sub	r5, r5, #4
 634:	0a000022 	beq	6c4 <__call_exitprocs+0x100>
 638:	e3570000 	cmp	r7, #0
 63c:	1afffff6 	bne	61c <__call_exitprocs+0x58>
 640:	e5963004 	ldr	r3, [r6, #4]
 644:	e06a2005 	rsb	r2, r10, r5
 648:	e2433001 	sub	r3, r3, #1
 64c:	e0862002 	add	r2, r6, r2
 650:	e1530004 	cmp	r3, r4
 654:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 658:	13a01000 	movne	r1, #0
 65c:	05864004 	streq	r4, [r6, #4]
 660:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 664:	e3530000 	cmp	r3, #0
 668:	0affffee 	beq	628 <__call_exitprocs+0x64>
 66c:	e1a02418 	lsl	r2, r8, r4
 670:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 674:	e1120001 	tst	r2, r1
 678:	e5969004 	ldr	r9, [r6, #4]
 67c:	0a000016 	beq	6dc <__call_exitprocs+0x118>
 680:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 684:	e1120001 	tst	r2, r1
 688:	1a000016 	bne	6e8 <__call_exitprocs+0x124>
 68c:	e59d0008 	ldr	r0, [sp, #8]
 690:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 694:	e1a0e00f 	mov	lr, pc
 698:	e12fff13 	bx	r3
 69c:	e5963004 	ldr	r3, [r6, #4]
 6a0:	e1530009 	cmp	r3, r9
 6a4:	1affffd0 	bne	5ec <__call_exitprocs+0x28>
 6a8:	e59b3000 	ldr	r3, [r11]
 6ac:	e1530006 	cmp	r3, r6
 6b0:	1affffcd 	bne	5ec <__call_exitprocs+0x28>
 6b4:	e2444001 	sub	r4, r4, #1
 6b8:	e3740001 	cmn	r4, #1
 6bc:	e2455004 	sub	r5, r5, #4
 6c0:	1affffdc 	bne	638 <__call_exitprocs+0x74>
 6c4:	e59f1070 	ldr	r1, [pc, #112]	; 73c <__call_exitprocs+0x178>
 6c8:	e3510000 	cmp	r1, #0
 6cc:	1a000009 	bne	6f8 <__call_exitprocs+0x134>
 6d0:	e28dd014 	add	sp, sp, #20
 6d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6d8:	e12fff1e 	bx	lr
 6dc:	e1a0e00f 	mov	lr, pc
 6e0:	e12fff13 	bx	r3
 6e4:	eaffffec 	b	69c <__call_exitprocs+0xd8>
 6e8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 6ec:	e1a0e00f 	mov	lr, pc
 6f0:	e12fff13 	bx	r3
 6f4:	eaffffe8 	b	69c <__call_exitprocs+0xd8>
 6f8:	e5963004 	ldr	r3, [r6, #4]
 6fc:	e3530000 	cmp	r3, #0
 700:	e5963000 	ldr	r3, [r6]
 704:	1a000008 	bne	72c <__call_exitprocs+0x168>
 708:	e3530000 	cmp	r3, #0
 70c:	0a000006 	beq	72c <__call_exitprocs+0x168>
 710:	e1a00006 	mov	r0, r6
 714:	e58b3000 	str	r3, [r11]
 718:	e320f000 	nop	{0}
 71c:	e59b6000 	ldr	r6, [r11]
 720:	e3560000 	cmp	r6, #0
 724:	1affffb5 	bne	600 <__call_exitprocs+0x3c>
 728:	eaffffe8 	b	6d0 <__call_exitprocs+0x10c>
 72c:	e1a0b006 	mov	r11, r6
 730:	e1a06003 	mov	r6, r3
 734:	eafffff9 	b	720 <__call_exitprocs+0x15c>
 738:	000008b4 	.word	0x000008b4
 73c:	00000000 	.word	0x00000000

00000740 <register_fini>:
 740:	e92d4008 	push	{r3, lr}
 744:	e59f3010 	ldr	r3, [pc, #16]	; 75c <register_fini+0x1c>
 748:	e3530000 	cmp	r3, #0
 74c:	159f000c 	ldrne	r0, [pc, #12]	; 760 <register_fini+0x20>
 750:	1bffff49 	blne	47c <atexit>
 754:	e8bd4008 	pop	{r3, lr}
 758:	e12fff1e 	bx	lr
 75c:	000008dc 	.word	0x000008dc
 760:	00000764 	.word	0x00000764

00000764 <__libc_fini_array>:
 764:	e92d4038 	push	{r3, r4, r5, lr}
 768:	e59f5030 	ldr	r5, [pc, #48]	; 7a0 <__libc_fini_array+0x3c>
 76c:	e59f4030 	ldr	r4, [pc, #48]	; 7a4 <__libc_fini_array+0x40>
 770:	e0654004 	rsb	r4, r5, r4
 774:	e1b04144 	asrs	r4, r4, #2
 778:	10855104 	addne	r5, r5, r4, lsl #2
 77c:	0a000004 	beq	794 <__libc_fini_array+0x30>
 780:	e5353004 	ldr	r3, [r5, #-4]!
 784:	e1a0e00f 	mov	lr, pc
 788:	e12fff13 	bx	r3
 78c:	e2544001 	subs	r4, r4, #1
 790:	1afffffa 	bne	780 <__libc_fini_array+0x1c>
 794:	eb000050 	bl	8dc <__libc_fini>
 798:	e8bd4038 	pop	{r3, r4, r5, lr}
 79c:	e12fff1e 	bx	lr
 7a0:	000008f4 	.word	0x000008f4
 7a4:	000008f8 	.word	0x000008f8

000007a8 <__cs3_premain>:
 7a8:	e92d4008 	push	{r3, lr}
 7ac:	eb00001d 	bl	828 <__libc_init_array>
 7b0:	e59f3030 	ldr	r3, [pc, #48]	; 7e8 <__cs3_premain+0x40>
 7b4:	e3530000 	cmp	r3, #0
 7b8:	15930000 	ldrne	r0, [r3]
 7bc:	01a00003 	moveq	r0, r3
 7c0:	e59f3024 	ldr	r3, [pc, #36]	; 7ec <__cs3_premain+0x44>
 7c4:	e3530000 	cmp	r3, #0
 7c8:	15931000 	ldrne	r1, [r3]
 7cc:	01a01003 	moveq	r1, r3
 7d0:	e3a02000 	mov	r2, #0
 7d4:	ebffff00 	bl	3dc <main>
 7d8:	e59f3010 	ldr	r3, [pc, #16]	; 7f0 <__cs3_premain+0x48>
 7dc:	e3530000 	cmp	r3, #0
 7e0:	1bffff2d 	blne	49c <exit>
 7e4:	eafffffe 	b	7e4 <__cs3_premain+0x3c>
	...
 7f0:	0000049c 	.word	0x0000049c

000007f4 <_exit>:
 7f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 7f8:	e3a00018 	mov	r0, #24
 7fc:	e59f1004 	ldr	r1, [pc, #4]	; 808 <_exit+0x14>
 800:	ef123456 	svc	0x00123456
 804:	eafffffe 	b	804 <_exit+0x10>
 808:	00020026 	.word	0x00020026

0000080c <__cs3_isr_interrupt>:
 80c:	eafffffe 	b	80c <__cs3_isr_interrupt>

00000810 <__cs3_isr_undef>:
 810:	eafffffe 	b	810 <__cs3_isr_undef>

00000814 <__cs3_isr_swi>:
 814:	eafffffe 	b	814 <__cs3_isr_swi>

00000818 <__cs3_isr_pabort>:
 818:	eafffffe 	b	818 <__cs3_isr_pabort>

0000081c <__cs3_isr_dabort>:
 81c:	eafffffe 	b	81c <__cs3_isr_dabort>

00000820 <__cs3_isr_irq>:
 820:	eafffffe 	b	820 <__cs3_isr_irq>

00000824 <__cs3_isr_fiq>:
 824:	eafffffe 	b	824 <__cs3_isr_fiq>

00000828 <__libc_init_array>:
 828:	e92d4070 	push	{r4, r5, r6, lr}
 82c:	e59f506c 	ldr	r5, [pc, #108]	; 8a0 <__libc_init_array+0x78>
 830:	e59f606c 	ldr	r6, [pc, #108]	; 8a4 <__libc_init_array+0x7c>
 834:	e0656006 	rsb	r6, r5, r6
 838:	e1b06146 	asrs	r6, r6, #2
 83c:	12455004 	subne	r5, r5, #4
 840:	13a04000 	movne	r4, #0
 844:	0a000005 	beq	860 <__libc_init_array+0x38>
 848:	e5b53004 	ldr	r3, [r5, #4]!
 84c:	e2844001 	add	r4, r4, #1
 850:	e1a0e00f 	mov	lr, pc
 854:	e12fff13 	bx	r3
 858:	e1560004 	cmp	r6, r4
 85c:	1afffff9 	bne	848 <__libc_init_array+0x20>
 860:	e59f5040 	ldr	r5, [pc, #64]	; 8a8 <__libc_init_array+0x80>
 864:	e59f6040 	ldr	r6, [pc, #64]	; 8ac <__libc_init_array+0x84>
 868:	e0656006 	rsb	r6, r5, r6
 86c:	eb000012 	bl	8bc <_init>
 870:	e1b06146 	asrs	r6, r6, #2
 874:	12455004 	subne	r5, r5, #4
 878:	13a04000 	movne	r4, #0
 87c:	0a000005 	beq	898 <__libc_init_array+0x70>
 880:	e5b53004 	ldr	r3, [r5, #4]!
 884:	e2844001 	add	r4, r4, #1
 888:	e1a0e00f 	mov	lr, pc
 88c:	e12fff13 	bx	r3
 890:	e1560004 	cmp	r6, r4
 894:	1afffff9 	bne	880 <__libc_init_array+0x58>
 898:	e8bd4070 	pop	{r4, r5, r6, lr}
 89c:	e12fff1e 	bx	lr
 8a0:	000008d4 	.word	0x000008d4
 8a4:	000008d4 	.word	0x000008d4
 8a8:	000008d4 	.word	0x000008d4
 8ac:	000008dc 	.word	0x000008dc

Disassembly of section .rodata:

000008b4 <_global_impure_ptr>:
 8b4:	00000920 00000043                        ...C...

000008bc <_init>:
 8bc:	e1a0c00d 	mov	r12, sp
 8c0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8c4:	e24cb004 	sub	r11, r12, #4
 8c8:	e24bd028 	sub	sp, r11, #40	; 0x28
 8cc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8d0:	e12fff1e 	bx	lr

000008d4 <__init_array_start>:
 8d4:	00000740 	.word	0x00000740

000008d8 <__frame_dummy_init_array_entry>:
 8d8:	00000208                                ....

000008dc <__libc_fini>:
 8dc:	e1a0c00d 	mov	r12, sp
 8e0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8e4:	e24cb004 	sub	r11, r12, #4
 8e8:	e24bd028 	sub	sp, r11, #40	; 0x28
 8ec:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8f0:	e12fff1e 	bx	lr

000008f4 <__fini_array_start>:
 8f4:	000001c4 	.word	0x000001c4

000008f8 <__cs3_regions>:
	...
 904:	00000d50 	.word	0x00000d50
 908:	00000020 	.word	0x00000020

0000090c <__cs3_regions_end>:
 90c:	00000000 	.word	0x00000000
