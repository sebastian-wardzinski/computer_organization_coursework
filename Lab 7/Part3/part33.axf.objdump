
D:/ece243/Lab 7/Part3/part33.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 7c 0b 00 00 80 0b 00 00 84 0b 00 00     @...|...........
  30:	88 0b 00 00 78 0b 00 00 8c 0b 00 00 90 0b 00 00     ....x...........

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00028e 	bl	b14 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000c78 	.word	0x00000c78

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010b0 	.word	0x000010b0

00000124 <__cs3_heap_start_ptr>:
 124:	000010d8 	.word	0x000010d8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000010b8 	.word	0x000010b8
 170:	000010bb 	.word	0x000010bb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010b8 	.word	0x000010b8
 1bc:	000010b8 	.word	0x000010b8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010b8 	.word	0x000010b8
 200:	00000000 	.word	0x00000000
 204:	00000c1c 	.word	0x00000c1c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c1c 	.word	0x00000c1c
 250:	000010bc 	.word	0x000010bc
 254:	00000c78 	.word	0x00000c78
 258:	00000000 	.word	0x00000000

0000025c <swap>:
void plot_pixel(int x, int y, short int line_color);
void wait_for_vsync();

void swap(int* num1, int* num2){
	int temp;
	temp = *num1;
 25c:	e5903000 	ldr	r3, [r0]
	*num1 = *num2;
 260:	e5912000 	ldr	r2, [r1]
 264:	e5802000 	str	r2, [r0]
	*num2 = temp;
 268:	e5813000 	str	r3, [r1]
 26c:	e12fff1e 	bx	lr

00000270 <plot_pixel>:
		}
	}
}

void plot_pixel(int x, int y, short int line_color){
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 270:	e30130d4 	movw	r3, #4308	; 0x10d4
 274:	e3403000 	movt	r3, #0
 278:	e5933000 	ldr	r3, [r3]
 27c:	e1a00080 	lsl	r0, r0, #1
 280:	e0831501 	add	r1, r3, r1, lsl #10
 284:	e18120b0 	strh	r2, [r1, r0]
 288:	e12fff1e 	bx	lr

0000028c <draw_line>:
			plot_pixel(x, y, 0); 	//color black
		}
	}
}

void draw_line(int x0, int y0, int x1, int y1, int color){
 28c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 290:	e24dd014 	sub	sp, sp, #20
 294:	e58d000c 	str	r0, [sp, #12]
 298:	e58d1008 	str	r1, [sp, #8]
 29c:	e58d2004 	str	r2, [sp, #4]
 2a0:	e58d3000 	str	r3, [sp]
	int temp;
	bool steep = abs(y1-y0) > abs(x1-x0);
 2a4:	e0613003 	rsb	r3, r1, r3
 2a8:	e3530000 	cmp	r3, #0
 2ac:	b2633000 	rsblt	r3, r3, #0
 2b0:	e0602002 	rsb	r2, r0, r2
 2b4:	e022afc2 	eor	r10, r2, r2, asr #31
 2b8:	e04aafc2 	sub	r10, r10, r2, asr #31
 2bc:	e153000a 	cmp	r3, r10
 2c0:	d3a0a000 	movle	r10, #0
 2c4:	c3a0a001 	movgt	r10, #1
	int* x0ptr = &x0;
	int* x1ptr = &x1;
	int* y0ptr = &y0;
	int* y1ptr = &y1;
	
	if (steep){
 2c8:	e35a0000 	cmp	r10, #0
 2cc:	0a000005 	beq	2e8 <draw_line+0x5c>
		swap(x0ptr,y0ptr);
 2d0:	e28d000c 	add	r0, sp, #12
 2d4:	e28d1008 	add	r1, sp, #8
 2d8:	ebffffdf 	bl	25c <swap>
		swap(x1ptr,y1ptr);
 2dc:	e28d0004 	add	r0, sp, #4
 2e0:	e1a0100d 	mov	r1, sp
 2e4:	ebffffdc 	bl	25c <swap>
	}
	if (x0>x1){
 2e8:	e59d3004 	ldr	r3, [sp, #4]
 2ec:	e59d200c 	ldr	r2, [sp, #12]
 2f0:	e1520003 	cmp	r2, r3
 2f4:	da000005 	ble	310 <draw_line+0x84>
		swap(x0ptr,x1ptr);
 2f8:	e28d000c 	add	r0, sp, #12
 2fc:	e28d1004 	add	r1, sp, #4
 300:	ebffffd5 	bl	25c <swap>
		swap(y0ptr,y1ptr);
 304:	e28d0008 	add	r0, sp, #8
 308:	e1a0100d 	mov	r1, sp
 30c:	ebffffd2 	bl	25c <swap>
	}
	
	int deltax = x1-x0;
 310:	e59d3004 	ldr	r3, [sp, #4]
 314:	e59d400c 	ldr	r4, [sp, #12]
 318:	e0649003 	rsb	r9, r4, r3
	int deltay = abs(y1-y0);
 31c:	e59d2000 	ldr	r2, [sp]
 320:	e59d6008 	ldr	r6, [sp, #8]
 324:	e0667002 	rsb	r7, r6, r2
 328:	e3570000 	cmp	r7, #0
 32c:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax/2);
 330:	e0895fa9 	add	r5, r9, r9, lsr #31
 334:	e1a050c5 	asr	r5, r5, #1
 338:	e2655000 	rsb	r5, r5, #0
	int y = y0;
	
	int y_step;
	
	if (y0 < y1){
		y_step = 1;
 33c:	e1520006 	cmp	r2, r6
 340:	d3e0b000 	mvnle	r11, #0
 344:	c3a0b001 	movgt	r11, #1
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
 348:	e1530004 	cmp	r3, r4
 34c:	ba00001a 	blt	3bc <draw_line+0x130>
		if (steep){
			plot_pixel(y,x, color);
 350:	e1dd83f8 	ldrsh	r8, [sp, #56]	; 0x38
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
		if (steep){
 354:	e35a0000 	cmp	r10, #0
 358:	0a000008 	beq	380 <draw_line+0xf4>
			plot_pixel(y,x, color);
 35c:	e1a00006 	mov	r0, r6
 360:	e1a01004 	mov	r1, r4
 364:	e1a02008 	mov	r2, r8
 368:	ebffffc0 	bl	270 <plot_pixel>
			plot_pixel(y,x+1, color);
 36c:	e1a00006 	mov	r0, r6
 370:	e2841001 	add	r1, r4, #1
 374:	e1a02008 	mov	r2, r8
 378:	ebffffbc 	bl	270 <plot_pixel>
 37c:	ea000007 	b	3a0 <draw_line+0x114>
		}
		else{
			plot_pixel(x,y, color);
 380:	e1a00004 	mov	r0, r4
 384:	e1a01006 	mov	r1, r6
 388:	e1a02008 	mov	r2, r8
 38c:	ebffffb7 	bl	270 <plot_pixel>
			plot_pixel(x,y+1, color);
 390:	e1a00004 	mov	r0, r4
 394:	e2861001 	add	r1, r6, #1
 398:	e1a02008 	mov	r2, r8
 39c:	ebffffb3 	bl	270 <plot_pixel>
		}
		
		error = error + deltay;
		if (error >= 0){
 3a0:	e0955007 	adds	r5, r5, r7
			y = y + y_step;
 3a4:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
 3a8:	50695005 	rsbpl	r5, r9, r5
		y_step = 1;
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
 3ac:	e2844001 	add	r4, r4, #1
 3b0:	e59d3004 	ldr	r3, [sp, #4]
 3b4:	e1530004 	cmp	r3, r4
 3b8:	aaffffe5 	bge	354 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
 3bc:	e28dd014 	add	sp, sp, #20
 3c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003c4 <clear_screen>:
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 3c4:	e92d4070 	push	{r4, r5, r6, lr}
	for(int x = 0 ; x < 320 ; x++){
 3c8:	e3a05000 	mov	r5, #0
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 3cc:	e1a06005 	mov	r6, r5
 3d0:	ea000009 	b	3fc <clear_screen+0x38>
	for(int x = 0 ; x < 320 ; x++){
		for(int y = 0 ; y < 240 ; y++){
			plot_pixel(x, y, 0); 	//color black
 3d4:	e1a00005 	mov	r0, r5
 3d8:	e1a01004 	mov	r1, r4
 3dc:	e1a02006 	mov	r2, r6
 3e0:	ebffffa2 	bl	270 <plot_pixel>
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
	for(int x = 0 ; x < 320 ; x++){
		for(int y = 0 ; y < 240 ; y++){
 3e4:	e2844001 	add	r4, r4, #1
 3e8:	e35400f0 	cmp	r4, #240	; 0xf0
 3ec:	1afffff8 	bne	3d4 <clear_screen+0x10>
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
	for(int x = 0 ; x < 320 ; x++){
 3f0:	e2855001 	add	r5, r5, #1
 3f4:	e3550d05 	cmp	r5, #320	; 0x140
 3f8:	08bd8070 	popeq	{r4, r5, r6, pc}
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 3fc:	e1a04006 	mov	r4, r6
 400:	eafffff3 	b	3d4 <clear_screen+0x10>

00000404 <wait_for_vsync>:

void wait_for_vsync(){
	volatile int* pixel_ctrl_ptr = 0xFF203020;	//pixel controller
	register int status;
	
	*pixel_ctrl_ptr = 1;	//start the synchronization process
 404:	e3033fff 	movw	r3, #16383	; 0x3fff
 408:	e34f3f20 	movt	r3, #65312	; 0xff20
 40c:	e3a02001 	mov	r2, #1
 410:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
 414:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 418:	e3130001 	tst	r3, #1
 41c:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
 420:	e3032fff 	movw	r2, #16383	; 0x3fff
 424:	e34f2f20 	movt	r2, #65312	; 0xff20
 428:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	register int status;
	
	*pixel_ctrl_ptr = 1;	//start the synchronization process
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0){
 42c:	e3130001 	tst	r3, #1
 430:	1afffffc 	bne	428 <wait_for_vsync+0x24>
 434:	e12fff1e 	bx	lr

00000438 <main>:
		status = *(pixel_ctrl_ptr + 3);
	}
}

int main(void)
{	volatile int* sw_ptr = 0xFF200040;	//switch address
 438:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 43c:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
 440:	e3a04000 	mov	r4, #0
	int y_up[8];
	int dx = 1;
	int dy = 1;
    // initialize location and direction of rectangles(not shown)
	for(int i = 0 ; i < 8 ; i++){
		x[i] = rand()%317+1; 	//to avoid corner cases at the start
 444:	e3036e2f 	movw	r6, #15919	; 0x3e2f
 448:	e34363af 	movt	r6, #13231	; 0x33af
 44c:	e300813d 	movw	r8, #317	; 0x13d
		y[i] = rand()%237+1;
 450:	e30f5871 	movw	r5, #63601	; 0xf871
 454:	e3485a42 	movt	r5, #35394	; 0x8a42
 458:	e3a070ed 	mov	r7, #237	; 0xed
	int y_up[8];
	int dx = 1;
	int dy = 1;
    // initialize location and direction of rectangles(not shown)
	for(int i = 0 ; i < 8 ; i++){
		x[i] = rand()%317+1; 	//to avoid corner cases at the start
 45c:	eb0000df 	bl	7e0 <rand>
 460:	e0c21096 	smull	r1, r2, r6, r0
 464:	e1a03fc0 	asr	r3, r0, #31
 468:	e0632342 	rsb	r2, r3, r2, asr #6
 46c:	e0620298 	mls	r2, r8, r2, r0
 470:	e2822001 	add	r2, r2, #1
 474:	e28d3080 	add	r3, sp, #128	; 0x80
 478:	e7842003 	str	r2, [r4, r3]
		y[i] = rand()%237+1;
 47c:	eb0000d7 	bl	7e0 <rand>
 480:	e0c23095 	smull	r3, r2, r5, r0
 484:	e0822000 	add	r2, r2, r0
 488:	e1a03fc0 	asr	r3, r0, #31
 48c:	e06323c2 	rsb	r2, r3, r2, asr #7
 490:	e0620297 	mls	r2, r7, r2, r0
 494:	e2822001 	add	r2, r2, #1
 498:	e28d3060 	add	r3, sp, #96	; 0x60
 49c:	e7842003 	str	r2, [r4, r3]
		x_right[i] = rand()%2;
 4a0:	eb0000ce 	bl	7e0 <rand>
 4a4:	e0803fa0 	add	r3, r0, r0, lsr #31
 4a8:	e2033001 	and	r3, r3, #1
 4ac:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4b0:	e28d2040 	add	r2, sp, #64	; 0x40
 4b4:	e7840002 	str	r0, [r4, r2]
		y_up[i] = rand()%2;
 4b8:	eb0000c8 	bl	7e0 <rand>
 4bc:	e0803fa0 	add	r3, r0, r0, lsr #31
 4c0:	e2033001 	and	r3, r3, #1
 4c4:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4c8:	e28d2020 	add	r2, sp, #32
 4cc:	e7840002 	str	r0, [r4, r2]
 4d0:	e2844004 	add	r4, r4, #4
	int x_right[8];
	int y_up[8];
	int dx = 1;
	int dy = 1;
    // initialize location and direction of rectangles(not shown)
	for(int i = 0 ; i < 8 ; i++){
 4d4:	e3540020 	cmp	r4, #32
 4d8:	1affffdf 	bne	45c <main+0x24>
		x_right[i] = rand()%2;
		y_up[i] = rand()%2;
	}
	
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
 4dc:	e3034fff 	movw	r4, #16383	; 0x3fff
 4e0:	e34f4f20 	movt	r4, #65312	; 0xff20
 4e4:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
 4e8:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
 4ec:	ebffffc4 	bl	404 <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
 4f0:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
 4f4:	e30150d4 	movw	r5, #4308	; 0x10d4
 4f8:	e3405000 	movt	r5, #0
 4fc:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
 500:	ebffffaf 	bl	3c4 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
 504:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
 508:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
 50c:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
 510:	e5853000 	str	r3, [r5]
	int x[8];
	int y[8];
	int x_right[8];
	int y_up[8];
	int dx = 1;
	int dy = 1;
 514:	e3a09001 	mov	r9, #1
    // declare other variables(not shown)
	int x[8];
	int y[8];
	int x_right[8];
	int y_up[8];
	int dx = 1;
 518:	e1a0b009 	mov	r11, r9
    {
        /* Erase any boxes and lines that were drawn in the last iteration */
        clear_screen();
        // code for drawing the boxes and lines (not shown)
		int color;
		if(*sw_ptr == 0) color = 0x0F0F;
 51c:	e3a01000 	mov	r1, #0
 520:	e34f1f20 	movt	r1, #65312	; 0xff20
 524:	e58d1014 	str	r1, [sp, #20]
		if(y_up[i]) y[i]+=dy;
		else y[i]-=dy;
		}
		
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 528:	e3032fff 	movw	r2, #16383	; 0x3fff
 52c:	e34f2f20 	movt	r2, #65312	; 0xff20
 530:	e58d201c 	str	r2, [sp, #28]
 534:	e58d5018 	str	r5, [sp, #24]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
	
    while (1)
    {
        /* Erase any boxes and lines that were drawn in the last iteration */
        clear_screen();
 538:	ebffffa1 	bl	3c4 <clear_screen>
        // code for drawing the boxes and lines (not shown)
		int color;
		if(*sw_ptr == 0) color = 0x0F0F;
 53c:	e59d1014 	ldr	r1, [sp, #20]
 540:	e5913040 	ldr	r3, [r1, #64]	; 0x40
 544:	e30f20f0 	movw	r2, #61680	; 0xf0f0
 548:	e3001f0f 	movw	r1, #3855	; 0xf0f
 54c:	e3530000 	cmp	r3, #0
 550:	01a02001 	moveq	r2, r1
 554:	e58d2008 	str	r2, [sp, #8]
		else color = 0xF0F0;
		
		if(*(key_ptr + 3)==1){
 558:	e59d2014 	ldr	r2, [sp, #20]
 55c:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
 560:	e3530001 	cmp	r3, #1
			dx *= 2;
 564:	01a0b08b 	lsleq	r11, r11, #1
			*(key_ptr + 3) = 1;
 568:	0582305c 	streq	r3, [r2, #92]	; 0x5c
        // code for drawing the boxes and lines (not shown)
		int color;
		if(*sw_ptr == 0) color = 0x0F0F;
		else color = 0xF0F0;
		
		if(*(key_ptr + 3)==1){
 56c:	0a000016 	beq	5cc <main+0x194>
			dx *= 2;
			*(key_ptr + 3) = 1;
		}
		else if(*(key_ptr + 3)==2){
 570:	e59d1014 	ldr	r1, [sp, #20]
 574:	e591305c 	ldr	r3, [r1, #92]	; 0x5c
 578:	e3530002 	cmp	r3, #2
			dy *= 2;
 57c:	01a09089 	lsleq	r9, r9, #1
			*(key_ptr + 3) = 2;
 580:	0581305c 	streq	r3, [r1, #92]	; 0x5c
		
		if(*(key_ptr + 3)==1){
			dx *= 2;
			*(key_ptr + 3) = 1;
		}
		else if(*(key_ptr + 3)==2){
 584:	0a000010 	beq	5cc <main+0x194>
			dy *= 2;
			*(key_ptr + 3) = 2;
		}
		else if(*(key_ptr + 3)==4){
 588:	e59d2014 	ldr	r2, [sp, #20]
 58c:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
 590:	e3530004 	cmp	r3, #4
 594:	1a000005 	bne	5b0 <main+0x178>
			dx /= 2;
 598:	e08bbfab 	add	r11, r11, r11, lsr #31
 59c:	e1a0b0cb 	asr	r11, r11, #1
			dy /= 2;
 5a0:	e0899fa9 	add	r9, r9, r9, lsr #31
 5a4:	e1a090c9 	asr	r9, r9, #1
			*(key_ptr + 3) = 4;
 5a8:	e582305c 	str	r3, [r2, #92]	; 0x5c
 5ac:	ea000006 	b	5cc <main+0x194>
		}
		else if(*(key_ptr + 3)==8){
 5b0:	e59d1014 	ldr	r1, [sp, #20]
 5b4:	e591305c 	ldr	r3, [r1, #92]	; 0x5c
 5b8:	e3530008 	cmp	r3, #8
			dx = 1;
			dy = 1;
			*(key_ptr + 3) = 8;
 5bc:	03a02008 	moveq	r2, #8
 5c0:	0581205c 	streq	r2, [r1, #92]	; 0x5c
			dy /= 2;
			*(key_ptr + 3) = 4;
		}
		else if(*(key_ptr + 3)==8){
			dx = 1;
			dy = 1;
 5c4:	03a09001 	moveq	r9, #1
			dx /= 2;
			dy /= 2;
			*(key_ptr + 3) = 4;
		}
		else if(*(key_ptr + 3)==8){
			dx = 1;
 5c8:	01a0b009 	moveq	r11, r9
		
        // code for updating the locations of boxes (not shown)
		if(x_right[i] && x[i] >= 319-dx) x_right[i] = 0;
		if(!x_right[i] && x[i] <= dx) x_right[i] = 1;
		if(y_up[i] && y[i] >= 239-dy) y_up[i] = 0;
		if(!y_up[i] && y[i] <= dy*2) y_up[i] = 1;
 5cc:	e1a03089 	lsl	r3, r9, #1
 5d0:	e58d300c 	str	r3, [sp, #12]
 5d4:	e3a05000 	mov	r5, #0
			dx = 1;
			dy = 1;
			*(key_ptr + 3) = 8;
		}
		
		for(int i = 0 ; i < 8 ; i++){
 5d8:	e1a0a005 	mov	r10, r5
			dx /= 2;
			dy /= 2;
			*(key_ptr + 3) = 4;
		}
		else if(*(key_ptr + 3)==8){
			dx = 1;
 5dc:	e3e08001 	mvn	r8, #1
		
		for(int i = 0 ; i < 8 ; i++){
			
			for(int j = -2 ; j < 3 ; j++){
				for(int k = -2 ; k <3 ; k++){
					plot_pixel(x[i]+j, y[i]+k, 0xFFFF); 	//draw square with side length 5
 5e0:	e3e07000 	mvn	r7, #0
				}
			}
			draw_line(x[i], y[i], x[(i+1)%8], y[(i+1)%8], color); 	//draw line between current node and next node
		
        // code for updating the locations of boxes (not shown)
		if(x_right[i] && x[i] >= 319-dx) x_right[i] = 0;
 5e4:	e26b3f4f 	rsb	r3, r11, #316	; 0x13c
 5e8:	e2833003 	add	r3, r3, #3
 5ec:	e58d3010 	str	r3, [sp, #16]
 5f0:	ea00004f 	b	734 <main+0x2fc>
		
		for(int i = 0 ; i < 8 ; i++){
			
			for(int j = -2 ; j < 3 ; j++){
				for(int k = -2 ; k <3 ; k++){
					plot_pixel(x[i]+j, y[i]+k, 0xFFFF); 	//draw square with side length 5
 5f4:	e28d3080 	add	r3, sp, #128	; 0x80
 5f8:	e7950003 	ldr	r0, [r5, r3]
 5fc:	e28d3060 	add	r3, sp, #96	; 0x60
 600:	e7951003 	ldr	r1, [r5, r3]
 604:	e0860000 	add	r0, r6, r0
 608:	e0841001 	add	r1, r4, r1
 60c:	e1a02007 	mov	r2, r7
 610:	ebffff16 	bl	270 <plot_pixel>
		}
		
		for(int i = 0 ; i < 8 ; i++){
			
			for(int j = -2 ; j < 3 ; j++){
				for(int k = -2 ; k <3 ; k++){
 614:	e2844001 	add	r4, r4, #1
 618:	e3540003 	cmp	r4, #3
 61c:	1afffff4 	bne	5f4 <main+0x1bc>
			*(key_ptr + 3) = 8;
		}
		
		for(int i = 0 ; i < 8 ; i++){
			
			for(int j = -2 ; j < 3 ; j++){
 620:	e2866001 	add	r6, r6, #1
 624:	e3560003 	cmp	r6, #3
 628:	0a000001 	beq	634 <main+0x1fc>
			dx /= 2;
			dy /= 2;
			*(key_ptr + 3) = 4;
		}
		else if(*(key_ptr + 3)==8){
			dx = 1;
 62c:	e1a04008 	mov	r4, r8
 630:	eaffffef 	b	5f4 <main+0x1bc>
			for(int j = -2 ; j < 3 ; j++){
				for(int k = -2 ; k <3 ; k++){
					plot_pixel(x[i]+j, y[i]+k, 0xFFFF); 	//draw square with side length 5
				}
			}
			draw_line(x[i], y[i], x[(i+1)%8], y[(i+1)%8], color); 	//draw line between current node and next node
 634:	e28d3080 	add	r3, sp, #128	; 0x80
 638:	e7954003 	ldr	r4, [r5, r3]
 63c:	e28d3060 	add	r3, sp, #96	; 0x60
 640:	e7956003 	ldr	r6, [r5, r3]
 644:	e28aa001 	add	r10, r10, #1
 648:	e1a03fca 	asr	r3, r10, #31
 64c:	e1a03ea3 	lsr	r3, r3, #29
 650:	e08a2003 	add	r2, r10, r3
 654:	e2022007 	and	r2, r2, #7
 658:	e0633002 	rsb	r3, r3, r2
 65c:	e28d10a0 	add	r1, sp, #160	; 0xa0
 660:	e0813103 	add	r3, r1, r3, lsl #2
 664:	e5132020 	ldr	r2, [r3, #-32]	; 0xffffffe0
 668:	e5133040 	ldr	r3, [r3, #-64]	; 0xffffffc0
 66c:	e59d1008 	ldr	r1, [sp, #8]
 670:	e58d1000 	str	r1, [sp]
 674:	e1a00004 	mov	r0, r4
 678:	e1a01006 	mov	r1, r6
 67c:	ebffff02 	bl	28c <draw_line>
		
        // code for updating the locations of boxes (not shown)
		if(x_right[i] && x[i] >= 319-dx) x_right[i] = 0;
 680:	e28d3040 	add	r3, sp, #64	; 0x40
 684:	e7953003 	ldr	r3, [r5, r3]
 688:	e3530000 	cmp	r3, #0
 68c:	0a000030 	beq	754 <main+0x31c>
 690:	e59d2010 	ldr	r2, [sp, #16]
 694:	e1540002 	cmp	r4, r2
 698:	ba000006 	blt	6b8 <main+0x280>
 69c:	e28d3040 	add	r3, sp, #64	; 0x40
 6a0:	e3a01000 	mov	r1, #0
 6a4:	e7851003 	str	r1, [r5, r3]
 6a8:	ea000029 	b	754 <main+0x31c>
		if(!x_right[i] && x[i] <= dx) x_right[i] = 1;
 6ac:	e28d3040 	add	r3, sp, #64	; 0x40
 6b0:	e3a02001 	mov	r2, #1
 6b4:	e7852003 	str	r2, [r5, r3]
		if(y_up[i] && y[i] >= 239-dy) y_up[i] = 0;
 6b8:	e28d3020 	add	r3, sp, #32
 6bc:	e7953003 	ldr	r3, [r5, r3]
 6c0:	e3530000 	cmp	r3, #0
 6c4:	0a000025 	beq	760 <main+0x328>
 6c8:	e26930ef 	rsb	r3, r9, #239	; 0xef
 6cc:	e1560003 	cmp	r6, r3
 6d0:	ba000006 	blt	6f0 <main+0x2b8>
 6d4:	e28d3020 	add	r3, sp, #32
 6d8:	e3a01000 	mov	r1, #0
 6dc:	e7851003 	str	r1, [r5, r3]
 6e0:	ea00001e 	b	760 <main+0x328>
		if(!y_up[i] && y[i] <= dy*2) y_up[i] = 1;
 6e4:	e28d3020 	add	r3, sp, #32
 6e8:	e3a02001 	mov	r2, #1
 6ec:	e7852003 	str	r2, [r5, r3]
		
		
		if(x_right[i]) x[i]+=dx;
 6f0:	e28d3040 	add	r3, sp, #64	; 0x40
 6f4:	e7953003 	ldr	r3, [r5, r3]
 6f8:	e3530000 	cmp	r3, #0
 6fc:	108b4004 	addne	r4, r11, r4
		else x[i]-=dx;
 700:	006b4004 	rsbeq	r4, r11, r4
 704:	e28d3080 	add	r3, sp, #128	; 0x80
 708:	e7854003 	str	r4, [r5, r3]
		if(y_up[i]) y[i]+=dy;
 70c:	e28d3020 	add	r3, sp, #32
 710:	e7953003 	ldr	r3, [r5, r3]
 714:	e3530000 	cmp	r3, #0
 718:	10896006 	addne	r6, r9, r6
		else y[i]-=dy;
 71c:	00696006 	rsbeq	r6, r9, r6
 720:	e28d3060 	add	r3, sp, #96	; 0x60
 724:	e7856003 	str	r6, [r5, r3]
 728:	e2855004 	add	r5, r5, #4
			dx = 1;
			dy = 1;
			*(key_ptr + 3) = 8;
		}
		
		for(int i = 0 ; i < 8 ; i++){
 72c:	e35a0008 	cmp	r10, #8
 730:	0a000001 	beq	73c <main+0x304>
			dx /= 2;
			dy /= 2;
			*(key_ptr + 3) = 4;
		}
		else if(*(key_ptr + 3)==8){
			dx = 1;
 734:	e1a06008 	mov	r6, r8
 738:	eaffffbb 	b	62c <main+0x1f4>
		else x[i]-=dx;
		if(y_up[i]) y[i]+=dy;
		else y[i]-=dy;
		}
		
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
 73c:	ebffff30 	bl	404 <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 740:	e59d101c 	ldr	r1, [sp, #28]
 744:	e5113fdb 	ldr	r3, [r1, #-4059]	; 0xfffff025
 748:	e59d2018 	ldr	r2, [sp, #24]
 74c:	e5823000 	str	r3, [r2]
    }
 750:	eaffff78 	b	538 <main+0x100>
			}
			draw_line(x[i], y[i], x[(i+1)%8], y[(i+1)%8], color); 	//draw line between current node and next node
		
        // code for updating the locations of boxes (not shown)
		if(x_right[i] && x[i] >= 319-dx) x_right[i] = 0;
		if(!x_right[i] && x[i] <= dx) x_right[i] = 1;
 754:	e15b0004 	cmp	r11, r4
 758:	aaffffd3 	bge	6ac <main+0x274>
 75c:	eaffffd5 	b	6b8 <main+0x280>
		if(y_up[i] && y[i] >= 239-dy) y_up[i] = 0;
		if(!y_up[i] && y[i] <= dy*2) y_up[i] = 1;
 760:	e59d300c 	ldr	r3, [sp, #12]
 764:	e1560003 	cmp	r6, r3
 768:	daffffdd 	ble	6e4 <main+0x2ac>
 76c:	eaffffdf 	b	6f0 <main+0x2b8>

00000770 <atexit>:
 770:	e1a01000 	mov	r1, r0
 774:	e3a00000 	mov	r0, #0
 778:	e92d4008 	push	{r3, lr}
 77c:	e1a02000 	mov	r2, r0
 780:	e1a03000 	mov	r3, r0
 784:	eb00002c 	bl	83c <__register_exitproc>
 788:	e8bd4008 	pop	{r3, lr}
 78c:	e12fff1e 	bx	lr

00000790 <exit>:
 790:	e92d4008 	push	{r3, lr}
 794:	e3a01000 	mov	r1, #0
 798:	e1a04000 	mov	r4, r0
 79c:	eb000063 	bl	930 <__call_exitprocs>
 7a0:	e59f3018 	ldr	r3, [pc, #24]	; 7c0 <exit+0x30>
 7a4:	e5930000 	ldr	r0, [r3]
 7a8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 7ac:	e3530000 	cmp	r3, #0
 7b0:	11a0e00f 	movne	lr, pc
 7b4:	112fff13 	bxne	r3
 7b8:	e1a00004 	mov	r0, r4
 7bc:	eb0000e7 	bl	b60 <_exit>
 7c0:	00000c20 	.word	0x00000c20

000007c4 <srand>:
 7c4:	e59f3010 	ldr	r3, [pc, #16]	; 7dc <srand+0x18>
 7c8:	e5933000 	ldr	r3, [r3]
 7cc:	e3a02000 	mov	r2, #0
 7d0:	e58300a8 	str	r0, [r3, #168]	; 0xa8
 7d4:	e58320ac 	str	r2, [r3, #172]	; 0xac
 7d8:	e12fff1e 	bx	lr
 7dc:	00000c80 	.word	0x00000c80

000007e0 <rand>:
 7e0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 7e4:	e59f3044 	ldr	r3, [pc, #68]	; 830 <rand+0x50>
 7e8:	e593c000 	ldr	r12, [r3]
 7ec:	e59f4040 	ldr	r4, [pc, #64]	; 834 <rand+0x54>
 7f0:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
 7f4:	e0040492 	mul	r4, r2, r4
 7f8:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
 7fc:	e59f3034 	ldr	r3, [pc, #52]	; 838 <rand+0x58>
 800:	e0244193 	mla	r4, r3, r1, r4
 804:	e0810392 	umull	r0, r1, r2, r3
 808:	e3a02001 	mov	r2, #1
 80c:	e0922000 	adds	r2, r2, r0
 810:	e0841001 	add	r1, r4, r1
 814:	e3a03000 	mov	r3, #0
 818:	e0a33001 	adc	r3, r3, r1
 81c:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
 820:	e58c30ac 	str	r3, [r12, #172]	; 0xac
 824:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
 828:	e8bd0010 	ldmfd	sp!, {r4}
 82c:	e12fff1e 	bx	lr
 830:	00000c80 	.word	0x00000c80
 834:	5851f42d 	.word	0x5851f42d
 838:	4c957f2d 	.word	0x4c957f2d

0000083c <__register_exitproc>:
 83c:	e59fc0e4 	ldr	r12, [pc, #228]	; 928 <__register_exitproc+0xec>
 840:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 844:	e59c4000 	ldr	r4, [r12]
 848:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 84c:	e35c0000 	cmp	r12, #0
 850:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 854:	e59c5004 	ldr	r5, [r12, #4]
 858:	0584c148 	streq	r12, [r4, #328]	; 0x148
 85c:	e355001f 	cmp	r5, #31
 860:	e24dd010 	sub	sp, sp, #16
 864:	e1a06000 	mov	r6, r0
 868:	da000015 	ble	8c4 <__register_exitproc+0x88>
 86c:	e59f00b8 	ldr	r0, [pc, #184]	; 92c <__register_exitproc+0xf0>
 870:	e3500000 	cmp	r0, #0
 874:	1a000001 	bne	880 <__register_exitproc+0x44>
 878:	e3e00000 	mvn	r0, #0
 87c:	ea000018 	b	8e4 <__register_exitproc+0xa8>
 880:	e3a00e19 	mov	r0, #400	; 0x190
 884:	e58d100c 	str	r1, [sp, #12]
 888:	e58d2008 	str	r2, [sp, #8]
 88c:	e58d3004 	str	r3, [sp, #4]
 890:	e320f000 	nop	{0}
 894:	e250c000 	subs	r12, r0, #0
 898:	e59d100c 	ldr	r1, [sp, #12]
 89c:	e59d2008 	ldr	r2, [sp, #8]
 8a0:	e59d3004 	ldr	r3, [sp, #4]
 8a4:	0afffff3 	beq	878 <__register_exitproc+0x3c>
 8a8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 8ac:	e3a00000 	mov	r0, #0
 8b0:	e58c0004 	str	r0, [r12, #4]
 8b4:	e58c5000 	str	r5, [r12]
 8b8:	e584c148 	str	r12, [r4, #328]	; 0x148
 8bc:	e58c0188 	str	r0, [r12, #392]	; 0x188
 8c0:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 8c4:	e3560000 	cmp	r6, #0
 8c8:	e59c4004 	ldr	r4, [r12, #4]
 8cc:	1a000007 	bne	8f0 <__register_exitproc+0xb4>
 8d0:	e2843002 	add	r3, r4, #2
 8d4:	e2844001 	add	r4, r4, #1
 8d8:	e78c1103 	str	r1, [r12, r3, lsl #2]
 8dc:	e58c4004 	str	r4, [r12, #4]
 8e0:	e3a00000 	mov	r0, #0
 8e4:	e28dd010 	add	sp, sp, #16
 8e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8ec:	e12fff1e 	bx	lr
 8f0:	e3a00001 	mov	r0, #1
 8f4:	e1a00410 	lsl	r0, r0, r4
 8f8:	e08c8104 	add	r8, r12, r4, lsl #2
 8fc:	e3560002 	cmp	r6, #2
 900:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 904:	e5883108 	str	r3, [r8, #264]	; 0x108
 908:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 90c:	e1877000 	orr	r7, r7, r0
 910:	01830000 	orreq	r0, r3, r0
 914:	e1a05008 	mov	r5, r8
 918:	e5882088 	str	r2, [r8, #136]	; 0x88
 91c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 920:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 924:	eaffffe9 	b	8d0 <__register_exitproc+0x94>
 928:	00000c20 	.word	0x00000c20
 92c:	00000000 	.word	0x00000000

00000930 <__call_exitprocs>:
 930:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 934:	e59f3168 	ldr	r3, [pc, #360]	; aa4 <__call_exitprocs+0x174>
 938:	e5933000 	ldr	r3, [r3]
 93c:	e24dd014 	sub	sp, sp, #20
 940:	e58d3004 	str	r3, [sp, #4]
 944:	e2833f52 	add	r3, r3, #328	; 0x148
 948:	e58d0008 	str	r0, [sp, #8]
 94c:	e58d300c 	str	r3, [sp, #12]
 950:	e1a07001 	mov	r7, r1
 954:	e3a08001 	mov	r8, #1
 958:	e59d3004 	ldr	r3, [sp, #4]
 95c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 960:	e3560000 	cmp	r6, #0
 964:	e59db00c 	ldr	r11, [sp, #12]
 968:	0a000033 	beq	a3c <__call_exitprocs+0x10c>
 96c:	e5965004 	ldr	r5, [r6, #4]
 970:	e2554001 	subs	r4, r5, #1
 974:	5286a088 	addpl	r10, r6, #136	; 0x88
 978:	5285501f 	addpl	r5, r5, #31
 97c:	508a5105 	addpl	r5, r10, r5, lsl #2
 980:	5a000007 	bpl	9a4 <__call_exitprocs+0x74>
 984:	ea000029 	b	a30 <__call_exitprocs+0x100>
 988:	e5953000 	ldr	r3, [r5]
 98c:	e1530007 	cmp	r3, r7
 990:	0a000005 	beq	9ac <__call_exitprocs+0x7c>
 994:	e2444001 	sub	r4, r4, #1
 998:	e3740001 	cmn	r4, #1
 99c:	e2455004 	sub	r5, r5, #4
 9a0:	0a000022 	beq	a30 <__call_exitprocs+0x100>
 9a4:	e3570000 	cmp	r7, #0
 9a8:	1afffff6 	bne	988 <__call_exitprocs+0x58>
 9ac:	e5963004 	ldr	r3, [r6, #4]
 9b0:	e06a2005 	rsb	r2, r10, r5
 9b4:	e2433001 	sub	r3, r3, #1
 9b8:	e0862002 	add	r2, r6, r2
 9bc:	e1530004 	cmp	r3, r4
 9c0:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 9c4:	13a01000 	movne	r1, #0
 9c8:	05864004 	streq	r4, [r6, #4]
 9cc:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 9d0:	e3530000 	cmp	r3, #0
 9d4:	0affffee 	beq	994 <__call_exitprocs+0x64>
 9d8:	e1a02418 	lsl	r2, r8, r4
 9dc:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 9e0:	e1120001 	tst	r2, r1
 9e4:	e5969004 	ldr	r9, [r6, #4]
 9e8:	0a000016 	beq	a48 <__call_exitprocs+0x118>
 9ec:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 9f0:	e1120001 	tst	r2, r1
 9f4:	1a000016 	bne	a54 <__call_exitprocs+0x124>
 9f8:	e59d0008 	ldr	r0, [sp, #8]
 9fc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 a00:	e1a0e00f 	mov	lr, pc
 a04:	e12fff13 	bx	r3
 a08:	e5963004 	ldr	r3, [r6, #4]
 a0c:	e1530009 	cmp	r3, r9
 a10:	1affffd0 	bne	958 <__call_exitprocs+0x28>
 a14:	e59b3000 	ldr	r3, [r11]
 a18:	e1530006 	cmp	r3, r6
 a1c:	1affffcd 	bne	958 <__call_exitprocs+0x28>
 a20:	e2444001 	sub	r4, r4, #1
 a24:	e3740001 	cmn	r4, #1
 a28:	e2455004 	sub	r5, r5, #4
 a2c:	1affffdc 	bne	9a4 <__call_exitprocs+0x74>
 a30:	e59f1070 	ldr	r1, [pc, #112]	; aa8 <__call_exitprocs+0x178>
 a34:	e3510000 	cmp	r1, #0
 a38:	1a000009 	bne	a64 <__call_exitprocs+0x134>
 a3c:	e28dd014 	add	sp, sp, #20
 a40:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a44:	e12fff1e 	bx	lr
 a48:	e1a0e00f 	mov	lr, pc
 a4c:	e12fff13 	bx	r3
 a50:	eaffffec 	b	a08 <__call_exitprocs+0xd8>
 a54:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a58:	e1a0e00f 	mov	lr, pc
 a5c:	e12fff13 	bx	r3
 a60:	eaffffe8 	b	a08 <__call_exitprocs+0xd8>
 a64:	e5963004 	ldr	r3, [r6, #4]
 a68:	e3530000 	cmp	r3, #0
 a6c:	e5963000 	ldr	r3, [r6]
 a70:	1a000008 	bne	a98 <__call_exitprocs+0x168>
 a74:	e3530000 	cmp	r3, #0
 a78:	0a000006 	beq	a98 <__call_exitprocs+0x168>
 a7c:	e1a00006 	mov	r0, r6
 a80:	e58b3000 	str	r3, [r11]
 a84:	e320f000 	nop	{0}
 a88:	e59b6000 	ldr	r6, [r11]
 a8c:	e3560000 	cmp	r6, #0
 a90:	1affffb5 	bne	96c <__call_exitprocs+0x3c>
 a94:	eaffffe8 	b	a3c <__call_exitprocs+0x10c>
 a98:	e1a0b006 	mov	r11, r6
 a9c:	e1a06003 	mov	r6, r3
 aa0:	eafffff9 	b	a8c <__call_exitprocs+0x15c>
 aa4:	00000c20 	.word	0x00000c20
 aa8:	00000000 	.word	0x00000000

00000aac <register_fini>:
 aac:	e92d4008 	push	{r3, lr}
 ab0:	e59f3010 	ldr	r3, [pc, #16]	; ac8 <register_fini+0x1c>
 ab4:	e3530000 	cmp	r3, #0
 ab8:	159f000c 	ldrne	r0, [pc, #12]	; acc <register_fini+0x20>
 abc:	1bffff2b 	blne	770 <atexit>
 ac0:	e8bd4008 	pop	{r3, lr}
 ac4:	e12fff1e 	bx	lr
 ac8:	00000c48 	.word	0x00000c48
 acc:	00000ad0 	.word	0x00000ad0

00000ad0 <__libc_fini_array>:
 ad0:	e92d4038 	push	{r3, r4, r5, lr}
 ad4:	e59f5030 	ldr	r5, [pc, #48]	; b0c <__libc_fini_array+0x3c>
 ad8:	e59f4030 	ldr	r4, [pc, #48]	; b10 <__libc_fini_array+0x40>
 adc:	e0654004 	rsb	r4, r5, r4
 ae0:	e1b04144 	asrs	r4, r4, #2
 ae4:	10855104 	addne	r5, r5, r4, lsl #2
 ae8:	0a000004 	beq	b00 <__libc_fini_array+0x30>
 aec:	e5353004 	ldr	r3, [r5, #-4]!
 af0:	e1a0e00f 	mov	lr, pc
 af4:	e12fff13 	bx	r3
 af8:	e2544001 	subs	r4, r4, #1
 afc:	1afffffa 	bne	aec <__libc_fini_array+0x1c>
 b00:	eb000050 	bl	c48 <__libc_fini>
 b04:	e8bd4038 	pop	{r3, r4, r5, lr}
 b08:	e12fff1e 	bx	lr
 b0c:	00000c60 	.word	0x00000c60
 b10:	00000c64 	.word	0x00000c64

00000b14 <__cs3_premain>:
 b14:	e92d4008 	push	{r3, lr}
 b18:	eb00001d 	bl	b94 <__libc_init_array>
 b1c:	e59f3030 	ldr	r3, [pc, #48]	; b54 <__cs3_premain+0x40>
 b20:	e3530000 	cmp	r3, #0
 b24:	15930000 	ldrne	r0, [r3]
 b28:	01a00003 	moveq	r0, r3
 b2c:	e59f3024 	ldr	r3, [pc, #36]	; b58 <__cs3_premain+0x44>
 b30:	e3530000 	cmp	r3, #0
 b34:	15931000 	ldrne	r1, [r3]
 b38:	01a01003 	moveq	r1, r3
 b3c:	e3a02000 	mov	r2, #0
 b40:	ebfffe3c 	bl	438 <main>
 b44:	e59f3010 	ldr	r3, [pc, #16]	; b5c <__cs3_premain+0x48>
 b48:	e3530000 	cmp	r3, #0
 b4c:	1bffff0f 	blne	790 <exit>
 b50:	eafffffe 	b	b50 <__cs3_premain+0x3c>
	...
 b5c:	00000790 	.word	0x00000790

00000b60 <_exit>:
 b60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b64:	e3a00018 	mov	r0, #24
 b68:	e59f1004 	ldr	r1, [pc, #4]	; b74 <_exit+0x14>
 b6c:	ef123456 	svc	0x00123456
 b70:	eafffffe 	b	b70 <_exit+0x10>
 b74:	00020026 	.word	0x00020026

00000b78 <__cs3_isr_interrupt>:
 b78:	eafffffe 	b	b78 <__cs3_isr_interrupt>

00000b7c <__cs3_isr_undef>:
 b7c:	eafffffe 	b	b7c <__cs3_isr_undef>

00000b80 <__cs3_isr_swi>:
 b80:	eafffffe 	b	b80 <__cs3_isr_swi>

00000b84 <__cs3_isr_pabort>:
 b84:	eafffffe 	b	b84 <__cs3_isr_pabort>

00000b88 <__cs3_isr_dabort>:
 b88:	eafffffe 	b	b88 <__cs3_isr_dabort>

00000b8c <__cs3_isr_irq>:
 b8c:	eafffffe 	b	b8c <__cs3_isr_irq>

00000b90 <__cs3_isr_fiq>:
 b90:	eafffffe 	b	b90 <__cs3_isr_fiq>

00000b94 <__libc_init_array>:
 b94:	e92d4070 	push	{r4, r5, r6, lr}
 b98:	e59f506c 	ldr	r5, [pc, #108]	; c0c <__libc_init_array+0x78>
 b9c:	e59f606c 	ldr	r6, [pc, #108]	; c10 <__libc_init_array+0x7c>
 ba0:	e0656006 	rsb	r6, r5, r6
 ba4:	e1b06146 	asrs	r6, r6, #2
 ba8:	12455004 	subne	r5, r5, #4
 bac:	13a04000 	movne	r4, #0
 bb0:	0a000005 	beq	bcc <__libc_init_array+0x38>
 bb4:	e5b53004 	ldr	r3, [r5, #4]!
 bb8:	e2844001 	add	r4, r4, #1
 bbc:	e1a0e00f 	mov	lr, pc
 bc0:	e12fff13 	bx	r3
 bc4:	e1560004 	cmp	r6, r4
 bc8:	1afffff9 	bne	bb4 <__libc_init_array+0x20>
 bcc:	e59f5040 	ldr	r5, [pc, #64]	; c14 <__libc_init_array+0x80>
 bd0:	e59f6040 	ldr	r6, [pc, #64]	; c18 <__libc_init_array+0x84>
 bd4:	e0656006 	rsb	r6, r5, r6
 bd8:	eb000012 	bl	c28 <_init>
 bdc:	e1b06146 	asrs	r6, r6, #2
 be0:	12455004 	subne	r5, r5, #4
 be4:	13a04000 	movne	r4, #0
 be8:	0a000005 	beq	c04 <__libc_init_array+0x70>
 bec:	e5b53004 	ldr	r3, [r5, #4]!
 bf0:	e2844001 	add	r4, r4, #1
 bf4:	e1a0e00f 	mov	lr, pc
 bf8:	e12fff13 	bx	r3
 bfc:	e1560004 	cmp	r6, r4
 c00:	1afffff9 	bne	bec <__libc_init_array+0x58>
 c04:	e8bd4070 	pop	{r4, r5, r6, lr}
 c08:	e12fff1e 	bx	lr
 c0c:	00000c40 	.word	0x00000c40
 c10:	00000c40 	.word	0x00000c40
 c14:	00000c40 	.word	0x00000c40
 c18:	00000c48 	.word	0x00000c48

Disassembly of section .rodata:

00000c20 <_global_impure_ptr>:
 c20:	00000c88 00000043                       ....C...

00000c28 <_init>:
 c28:	e1a0c00d 	mov	r12, sp
 c2c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c30:	e24cb004 	sub	r11, r12, #4
 c34:	e24bd028 	sub	sp, r11, #40	; 0x28
 c38:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c3c:	e12fff1e 	bx	lr

00000c40 <__init_array_start>:
 c40:	00000aac 	.word	0x00000aac

00000c44 <__frame_dummy_init_array_entry>:
 c44:	00000208                                ....

00000c48 <__libc_fini>:
 c48:	e1a0c00d 	mov	r12, sp
 c4c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c50:	e24cb004 	sub	r11, r12, #4
 c54:	e24bd028 	sub	sp, r11, #40	; 0x28
 c58:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c5c:	e12fff1e 	bx	lr

00000c60 <__fini_array_start>:
 c60:	000001c4 	.word	0x000001c4

00000c64 <__cs3_regions>:
	...
 c70:	000010b8 	.word	0x000010b8
 c74:	00000020 	.word	0x00000020
