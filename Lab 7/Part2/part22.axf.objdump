
D:/ece243/Lab 7/Part2/part22.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 64 08 00 00 68 08 00 00 6c 08 00 00     @...d...h...l...
  30:	70 08 00 00 60 08 00 00 74 08 00 00 78 08 00 00     p...`...t...x...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001c8 	bl	7fc <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000960 	.word	0x00000960

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d98 	.word	0x00000d98

00000124 <__cs3_heap_start_ptr>:
 124:	00000dc0 	.word	0x00000dc0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000da0 	.word	0x00000da0
 170:	00000da3 	.word	0x00000da3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000da0 	.word	0x00000da0
 1bc:	00000da0 	.word	0x00000da0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000da0 	.word	0x00000da0
 200:	00000000 	.word	0x00000000
 204:	00000904 	.word	0x00000904

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000904 	.word	0x00000904
 250:	00000da4 	.word	0x00000da4
 254:	00000960 	.word	0x00000960
 258:	00000000 	.word	0x00000000

0000025c <swap>:
void plot_pixel(int x, int y, short int line_color);


void swap(int* num1, int* num2){
	int temp;
	temp = *num1;
 25c:	e5903000 	ldr	r3, [r0]
	*num1 = *num2;
 260:	e5912000 	ldr	r2, [r1]
 264:	e5802000 	str	r2, [r0]
	*num2 = temp;
 268:	e5813000 	str	r3, [r1]
 26c:	e12fff1e 	bx	lr

00000270 <plot_pixel>:
		}
	}
}

void plot_pixel(int x, int y, short int line_color){
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 270:	e3003dbc 	movw	r3, #3516	; 0xdbc
 274:	e3403000 	movt	r3, #0
 278:	e5933000 	ldr	r3, [r3]
 27c:	e1a00080 	lsl	r0, r0, #1
 280:	e0831501 	add	r1, r3, r1, lsl #10
 284:	e18120b0 	strh	r2, [r1, r0]
 288:	e12fff1e 	bx	lr

0000028c <draw_line>:
			plot_pixel(x, y, 0); 	//color black
		}
	}
}

void draw_line(int x0, int y0, int x1, int y1, int color){
 28c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 290:	e24dd014 	sub	sp, sp, #20
 294:	e58d000c 	str	r0, [sp, #12]
 298:	e58d1008 	str	r1, [sp, #8]
 29c:	e58d2004 	str	r2, [sp, #4]
 2a0:	e58d3000 	str	r3, [sp]
	int temp;
	bool steep = abs(y1-y0) > abs(x1-x0);
 2a4:	e0613003 	rsb	r3, r1, r3
 2a8:	e3530000 	cmp	r3, #0
 2ac:	b2633000 	rsblt	r3, r3, #0
 2b0:	e0602002 	rsb	r2, r0, r2
 2b4:	e0228fc2 	eor	r8, r2, r2, asr #31
 2b8:	e0488fc2 	sub	r8, r8, r2, asr #31
 2bc:	e1530008 	cmp	r3, r8
 2c0:	d3a08000 	movle	r8, #0
 2c4:	c3a08001 	movgt	r8, #1
	int* x0ptr = &x0;
	int* x1ptr = &x1;
	int* y0ptr = &y0;
	int* y1ptr = &y1;
	
	if (steep){
 2c8:	e3580000 	cmp	r8, #0
 2cc:	0a000005 	beq	2e8 <draw_line+0x5c>
		swap(x0ptr,y0ptr);
 2d0:	e28d000c 	add	r0, sp, #12
 2d4:	e28d1008 	add	r1, sp, #8
 2d8:	ebffffdf 	bl	25c <swap>
		swap(x1ptr,y1ptr);
 2dc:	e28d0004 	add	r0, sp, #4
 2e0:	e1a0100d 	mov	r1, sp
 2e4:	ebffffdc 	bl	25c <swap>
	}
	if (x0>x1){
 2e8:	e59d3004 	ldr	r3, [sp, #4]
 2ec:	e59d200c 	ldr	r2, [sp, #12]
 2f0:	e1520003 	cmp	r2, r3
 2f4:	da000005 	ble	310 <draw_line+0x84>
		swap(x0ptr,x1ptr);
 2f8:	e28d000c 	add	r0, sp, #12
 2fc:	e28d1004 	add	r1, sp, #4
 300:	ebffffd5 	bl	25c <swap>
		swap(y0ptr,y1ptr);
 304:	e28d0008 	add	r0, sp, #8
 308:	e1a0100d 	mov	r1, sp
 30c:	ebffffd2 	bl	25c <swap>
	}
	
	int deltax = x1-x0;
 310:	e59d3004 	ldr	r3, [sp, #4]
 314:	e59d500c 	ldr	r5, [sp, #12]
 318:	e0659003 	rsb	r9, r5, r3
	int deltay = abs(y1-y0);
 31c:	e59d2000 	ldr	r2, [sp]
 320:	e59d6008 	ldr	r6, [sp, #8]
 324:	e0667002 	rsb	r7, r6, r2
 328:	e3570000 	cmp	r7, #0
 32c:	b2677000 	rsblt	r7, r7, #0
	int error = -(deltax/2);
 330:	e0894fa9 	add	r4, r9, r9, lsr #31
 334:	e1a040c4 	asr	r4, r4, #1
 338:	e2644000 	rsb	r4, r4, #0
	int y = y0;
	
	int y_step;
	
	if (y0 < y1){
		y_step = 1;
 33c:	e1520006 	cmp	r2, r6
 340:	d3e0b000 	mvnle	r11, #0
 344:	c3a0b001 	movgt	r11, #1
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
 348:	e1530005 	cmp	r3, r5
 34c:	ba00000e 	blt	38c <draw_line+0x100>
		if (steep) plot_pixel(y,x, color);
 350:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
 354:	e3580000 	cmp	r8, #0
 358:	11a00006 	movne	r0, r6
 35c:	11a01005 	movne	r1, r5
		else plot_pixel(x,y, color);
 360:	01a00005 	moveq	r0, r5
 364:	01a01006 	moveq	r1, r6
 368:	e1a0200a 	mov	r2, r10
 36c:	ebffffbf 	bl	270 <plot_pixel>
		
		error = error + deltay;
		if (error >= 0){
 370:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 374:	5086600b 	addpl	r6, r6, r11
			error = error - deltax;
 378:	50694004 	rsbpl	r4, r9, r4
		y_step = 1;
	} else {
		y_step = -1;
	}
	
	for(int x  = x0; x <= x1; x++){
 37c:	e2855001 	add	r5, r5, #1
 380:	e59d3004 	ldr	r3, [sp, #4]
 384:	e1530005 	cmp	r3, r5
 388:	aafffff1 	bge	354 <draw_line+0xc8>
		if (error >= 0){
			y = y + y_step;
			error = error - deltax;
		}
	}
}
 38c:	e28dd014 	add	sp, sp, #20
 390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000394 <clear_screen>:
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 394:	e92d4070 	push	{r4, r5, r6, lr}
	for(int x = 0 ; x < 320 ; x++){
 398:	e3a05000 	mov	r5, #0
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 39c:	e1a06005 	mov	r6, r5
 3a0:	ea000009 	b	3cc <clear_screen+0x38>
	for(int x = 0 ; x < 320 ; x++){
		for(int y = 0 ; y < 240 ; y++){
			plot_pixel(x, y, 0); 	//color black
 3a4:	e1a00005 	mov	r0, r5
 3a8:	e1a01004 	mov	r1, r4
 3ac:	e1a02006 	mov	r2, r6
 3b0:	ebffffae 	bl	270 <plot_pixel>
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
	for(int x = 0 ; x < 320 ; x++){
		for(int y = 0 ; y < 240 ; y++){
 3b4:	e2844001 	add	r4, r4, #1
 3b8:	e35400f0 	cmp	r4, #240	; 0xf0
 3bc:	1afffff8 	bne	3a4 <clear_screen+0x10>
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
	for(int x = 0 ; x < 320 ; x++){
 3c0:	e2855001 	add	r5, r5, #1
 3c4:	e3550d05 	cmp	r5, #320	; 0x140
 3c8:	08bd8070 	popeq	{r4, r5, r6, pc}
	*num1 = *num2;
	*num2 = temp;
}

// code not shown for clear_screen() and draw_line() subroutines
void clear_screen(){
 3cc:	e1a04006 	mov	r4, r6
 3d0:	eafffff3 	b	3a4 <clear_screen+0x10>

000003d4 <wait_for_vsync>:

void wait_for_vsync(){
	volatile int* pixel_ctrl_ptr = 0xFF203020;	//pixel controller
	register int status;
	
	*pixel_ctrl_ptr = 1;	//start the synchronization process
 3d4:	e3033fff 	movw	r3, #16383	; 0x3fff
 3d8:	e34f3f20 	movt	r3, #65312	; 0xff20
 3dc:	e3a02001 	mov	r2, #1
 3e0:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
 3e4:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 3e8:	e3130001 	tst	r3, #1
 3ec:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
 3f0:	e3032fff 	movw	r2, #16383	; 0x3fff
 3f4:	e34f2f20 	movt	r2, #65312	; 0xff20
 3f8:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	register int status;
	
	*pixel_ctrl_ptr = 1;	//start the synchronization process
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0){
 3fc:	e3130001 	tst	r3, #1
 400:	1afffffc 	bne	3f8 <wait_for_vsync+0x24>
 404:	e12fff1e 	bx	lr

00000408 <main>:
		status = *(pixel_ctrl_ptr + 3);
	}
}

int main(void){
 408:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 40c:	e24dd008 	sub	sp, sp, #8
	volatile int* pixel_ctrl_ptr = (int*) 0xFF203020;
	/*Read location of the pixel buffer from the pixel buffer controller*/
	pixel_buffer_start = *pixel_ctrl_ptr;
 410:	e3033fff 	movw	r3, #16383	; 0x3fff
 414:	e34f3f20 	movt	r3, #65312	; 0xff20
 418:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 41c:	e3003dbc 	movw	r3, #3516	; 0xdbc
 420:	e3403000 	movt	r3, #0
 424:	e5832000 	str	r2, [r3]
	
	clear_screen();
 428:	ebffffd9 	bl	394 <clear_screen>
	int y = 0;
	draw_line(0, y, 319, y, 0x001F);
 42c:	e3a0301f 	mov	r3, #31
 430:	e58d3000 	str	r3, [sp]
 434:	e3a00000 	mov	r0, #0
 438:	e1a01000 	mov	r1, r0
 43c:	e300213f 	movw	r2, #319	; 0x13f
 440:	e1a03000 	mov	r3, r0
 444:	ebffff90 	bl	28c <draw_line>
	int y_old = y;
	y++;
	bool y_increasing = true;
 448:	e3a08001 	mov	r8, #1
	pixel_buffer_start = *pixel_ctrl_ptr;
	
	clear_screen();
	int y = 0;
	draw_line(0, y, 319, y, 0x001F);
	int y_old = y;
 44c:	e3a03000 	mov	r3, #0
	y++;
 450:	e1a04008 	mov	r4, r8
	bool y_increasing = true;
	
	while(1){ 
		draw_line(0, y_old, 319, y_old, 0x0000);
 454:	e1a05003 	mov	r5, r3
 458:	e300613f 	movw	r6, #319	; 0x13f
		draw_line(0, y, 319, y, 0x001F);   //blue line
 45c:	e3a0a01f 	mov	r10, #31
		
		if(y == 239) y_increasing = false;
		else if(y == 0) y_increasing = true;
 460:	e1a09008 	mov	r9, r8
	int y_old = y;
	y++;
	bool y_increasing = true;
	
	while(1){ 
		draw_line(0, y_old, 319, y_old, 0x0000);
 464:	e58d5000 	str	r5, [sp]
 468:	e1a00005 	mov	r0, r5
 46c:	e1a01003 	mov	r1, r3
 470:	e1a02006 	mov	r2, r6
 474:	ebffff84 	bl	28c <draw_line>
		draw_line(0, y, 319, y, 0x001F);   //blue line
 478:	e58da000 	str	r10, [sp]
 47c:	e1a00005 	mov	r0, r5
 480:	e1a01004 	mov	r1, r4
 484:	e1a02006 	mov	r2, r6
 488:	e1a03004 	mov	r3, r4
 48c:	ebffff7e 	bl	28c <draw_line>
		
		if(y == 239) y_increasing = false;
 490:	e35400ef 	cmp	r4, #239	; 0xef
 494:	0a000007 	beq	4b8 <main+0xb0>
		else if(y == 0) y_increasing = true;
 498:	e3540000 	cmp	r4, #0
 49c:	0a000002 	beq	4ac <main+0xa4>
		
		y_old = y;
		if(y_increasing) y++;
 4a0:	e3580000 	cmp	r8, #0
 4a4:	0a000004 	beq	4bc <main+0xb4>
 4a8:	ea000000 	b	4b0 <main+0xa8>
	while(1){ 
		draw_line(0, y_old, 319, y_old, 0x0000);
		draw_line(0, y, 319, y, 0x001F);   //blue line
		
		if(y == 239) y_increasing = false;
		else if(y == 0) y_increasing = true;
 4ac:	e1a08009 	mov	r8, r9
		
		y_old = y;
		if(y_increasing) y++;
 4b0:	e2847001 	add	r7, r4, #1
 4b4:	ea000001 	b	4c0 <main+0xb8>
	
	while(1){ 
		draw_line(0, y_old, 319, y_old, 0x0000);
		draw_line(0, y, 319, y, 0x001F);   //blue line
		
		if(y == 239) y_increasing = false;
 4b8:	e1a08005 	mov	r8, r5
		else if(y == 0) y_increasing = true;
		
		y_old = y;
		if(y_increasing) y++;
		else y--;
 4bc:	e2447001 	sub	r7, r4, #1
		
		wait_for_vsync();
 4c0:	ebffffc3 	bl	3d4 <wait_for_vsync>
		draw_line(0, y, 319, y, 0x001F);   //blue line
		
		if(y == 239) y_increasing = false;
		else if(y == 0) y_increasing = true;
		
		y_old = y;
 4c4:	e1a03004 	mov	r3, r4
		if(y_increasing) y++;
		else y--;
		
		wait_for_vsync();
	}
 4c8:	e1a04007 	mov	r4, r7
 4cc:	eaffffe4 	b	464 <main+0x5c>

000004d0 <atexit>:
 4d0:	e1a01000 	mov	r1, r0
 4d4:	e3a00000 	mov	r0, #0
 4d8:	e92d4008 	push	{r3, lr}
 4dc:	e1a02000 	mov	r2, r0
 4e0:	e1a03000 	mov	r3, r0
 4e4:	eb00000e 	bl	524 <__register_exitproc>
 4e8:	e8bd4008 	pop	{r3, lr}
 4ec:	e12fff1e 	bx	lr

000004f0 <exit>:
 4f0:	e92d4008 	push	{r3, lr}
 4f4:	e3a01000 	mov	r1, #0
 4f8:	e1a04000 	mov	r4, r0
 4fc:	eb000045 	bl	618 <__call_exitprocs>
 500:	e59f3018 	ldr	r3, [pc, #24]	; 520 <exit+0x30>
 504:	e5930000 	ldr	r0, [r3]
 508:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 50c:	e3530000 	cmp	r3, #0
 510:	11a0e00f 	movne	lr, pc
 514:	112fff13 	bxne	r3
 518:	e1a00004 	mov	r0, r4
 51c:	eb0000c9 	bl	848 <_exit>
 520:	00000908 	.word	0x00000908

00000524 <__register_exitproc>:
 524:	e59fc0e4 	ldr	r12, [pc, #228]	; 610 <__register_exitproc+0xec>
 528:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 52c:	e59c4000 	ldr	r4, [r12]
 530:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 534:	e35c0000 	cmp	r12, #0
 538:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 53c:	e59c5004 	ldr	r5, [r12, #4]
 540:	0584c148 	streq	r12, [r4, #328]	; 0x148
 544:	e355001f 	cmp	r5, #31
 548:	e24dd010 	sub	sp, sp, #16
 54c:	e1a06000 	mov	r6, r0
 550:	da000015 	ble	5ac <__register_exitproc+0x88>
 554:	e59f00b8 	ldr	r0, [pc, #184]	; 614 <__register_exitproc+0xf0>
 558:	e3500000 	cmp	r0, #0
 55c:	1a000001 	bne	568 <__register_exitproc+0x44>
 560:	e3e00000 	mvn	r0, #0
 564:	ea000018 	b	5cc <__register_exitproc+0xa8>
 568:	e3a00e19 	mov	r0, #400	; 0x190
 56c:	e58d100c 	str	r1, [sp, #12]
 570:	e58d2008 	str	r2, [sp, #8]
 574:	e58d3004 	str	r3, [sp, #4]
 578:	e320f000 	nop	{0}
 57c:	e250c000 	subs	r12, r0, #0
 580:	e59d100c 	ldr	r1, [sp, #12]
 584:	e59d2008 	ldr	r2, [sp, #8]
 588:	e59d3004 	ldr	r3, [sp, #4]
 58c:	0afffff3 	beq	560 <__register_exitproc+0x3c>
 590:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 594:	e3a00000 	mov	r0, #0
 598:	e58c0004 	str	r0, [r12, #4]
 59c:	e58c5000 	str	r5, [r12]
 5a0:	e584c148 	str	r12, [r4, #328]	; 0x148
 5a4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 5a8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 5ac:	e3560000 	cmp	r6, #0
 5b0:	e59c4004 	ldr	r4, [r12, #4]
 5b4:	1a000007 	bne	5d8 <__register_exitproc+0xb4>
 5b8:	e2843002 	add	r3, r4, #2
 5bc:	e2844001 	add	r4, r4, #1
 5c0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5c4:	e58c4004 	str	r4, [r12, #4]
 5c8:	e3a00000 	mov	r0, #0
 5cc:	e28dd010 	add	sp, sp, #16
 5d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5d4:	e12fff1e 	bx	lr
 5d8:	e3a00001 	mov	r0, #1
 5dc:	e1a00410 	lsl	r0, r0, r4
 5e0:	e08c8104 	add	r8, r12, r4, lsl #2
 5e4:	e3560002 	cmp	r6, #2
 5e8:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5ec:	e5883108 	str	r3, [r8, #264]	; 0x108
 5f0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5f4:	e1877000 	orr	r7, r7, r0
 5f8:	01830000 	orreq	r0, r3, r0
 5fc:	e1a05008 	mov	r5, r8
 600:	e5882088 	str	r2, [r8, #136]	; 0x88
 604:	e58c7188 	str	r7, [r12, #392]	; 0x188
 608:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 60c:	eaffffe9 	b	5b8 <__register_exitproc+0x94>
 610:	00000908 	.word	0x00000908
 614:	00000000 	.word	0x00000000

00000618 <__call_exitprocs>:
 618:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 61c:	e59f3168 	ldr	r3, [pc, #360]	; 78c <__call_exitprocs+0x174>
 620:	e5933000 	ldr	r3, [r3]
 624:	e24dd014 	sub	sp, sp, #20
 628:	e58d3004 	str	r3, [sp, #4]
 62c:	e2833f52 	add	r3, r3, #328	; 0x148
 630:	e58d0008 	str	r0, [sp, #8]
 634:	e58d300c 	str	r3, [sp, #12]
 638:	e1a07001 	mov	r7, r1
 63c:	e3a08001 	mov	r8, #1
 640:	e59d3004 	ldr	r3, [sp, #4]
 644:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 648:	e3560000 	cmp	r6, #0
 64c:	e59db00c 	ldr	r11, [sp, #12]
 650:	0a000033 	beq	724 <__call_exitprocs+0x10c>
 654:	e5965004 	ldr	r5, [r6, #4]
 658:	e2554001 	subs	r4, r5, #1
 65c:	5286a088 	addpl	r10, r6, #136	; 0x88
 660:	5285501f 	addpl	r5, r5, #31
 664:	508a5105 	addpl	r5, r10, r5, lsl #2
 668:	5a000007 	bpl	68c <__call_exitprocs+0x74>
 66c:	ea000029 	b	718 <__call_exitprocs+0x100>
 670:	e5953000 	ldr	r3, [r5]
 674:	e1530007 	cmp	r3, r7
 678:	0a000005 	beq	694 <__call_exitprocs+0x7c>
 67c:	e2444001 	sub	r4, r4, #1
 680:	e3740001 	cmn	r4, #1
 684:	e2455004 	sub	r5, r5, #4
 688:	0a000022 	beq	718 <__call_exitprocs+0x100>
 68c:	e3570000 	cmp	r7, #0
 690:	1afffff6 	bne	670 <__call_exitprocs+0x58>
 694:	e5963004 	ldr	r3, [r6, #4]
 698:	e06a2005 	rsb	r2, r10, r5
 69c:	e2433001 	sub	r3, r3, #1
 6a0:	e0862002 	add	r2, r6, r2
 6a4:	e1530004 	cmp	r3, r4
 6a8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 6ac:	13a01000 	movne	r1, #0
 6b0:	05864004 	streq	r4, [r6, #4]
 6b4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6b8:	e3530000 	cmp	r3, #0
 6bc:	0affffee 	beq	67c <__call_exitprocs+0x64>
 6c0:	e1a02418 	lsl	r2, r8, r4
 6c4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6c8:	e1120001 	tst	r2, r1
 6cc:	e5969004 	ldr	r9, [r6, #4]
 6d0:	0a000016 	beq	730 <__call_exitprocs+0x118>
 6d4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6d8:	e1120001 	tst	r2, r1
 6dc:	1a000016 	bne	73c <__call_exitprocs+0x124>
 6e0:	e59d0008 	ldr	r0, [sp, #8]
 6e4:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6e8:	e1a0e00f 	mov	lr, pc
 6ec:	e12fff13 	bx	r3
 6f0:	e5963004 	ldr	r3, [r6, #4]
 6f4:	e1530009 	cmp	r3, r9
 6f8:	1affffd0 	bne	640 <__call_exitprocs+0x28>
 6fc:	e59b3000 	ldr	r3, [r11]
 700:	e1530006 	cmp	r3, r6
 704:	1affffcd 	bne	640 <__call_exitprocs+0x28>
 708:	e2444001 	sub	r4, r4, #1
 70c:	e3740001 	cmn	r4, #1
 710:	e2455004 	sub	r5, r5, #4
 714:	1affffdc 	bne	68c <__call_exitprocs+0x74>
 718:	e59f1070 	ldr	r1, [pc, #112]	; 790 <__call_exitprocs+0x178>
 71c:	e3510000 	cmp	r1, #0
 720:	1a000009 	bne	74c <__call_exitprocs+0x134>
 724:	e28dd014 	add	sp, sp, #20
 728:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 72c:	e12fff1e 	bx	lr
 730:	e1a0e00f 	mov	lr, pc
 734:	e12fff13 	bx	r3
 738:	eaffffec 	b	6f0 <__call_exitprocs+0xd8>
 73c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 740:	e1a0e00f 	mov	lr, pc
 744:	e12fff13 	bx	r3
 748:	eaffffe8 	b	6f0 <__call_exitprocs+0xd8>
 74c:	e5963004 	ldr	r3, [r6, #4]
 750:	e3530000 	cmp	r3, #0
 754:	e5963000 	ldr	r3, [r6]
 758:	1a000008 	bne	780 <__call_exitprocs+0x168>
 75c:	e3530000 	cmp	r3, #0
 760:	0a000006 	beq	780 <__call_exitprocs+0x168>
 764:	e1a00006 	mov	r0, r6
 768:	e58b3000 	str	r3, [r11]
 76c:	e320f000 	nop	{0}
 770:	e59b6000 	ldr	r6, [r11]
 774:	e3560000 	cmp	r6, #0
 778:	1affffb5 	bne	654 <__call_exitprocs+0x3c>
 77c:	eaffffe8 	b	724 <__call_exitprocs+0x10c>
 780:	e1a0b006 	mov	r11, r6
 784:	e1a06003 	mov	r6, r3
 788:	eafffff9 	b	774 <__call_exitprocs+0x15c>
 78c:	00000908 	.word	0x00000908
 790:	00000000 	.word	0x00000000

00000794 <register_fini>:
 794:	e92d4008 	push	{r3, lr}
 798:	e59f3010 	ldr	r3, [pc, #16]	; 7b0 <register_fini+0x1c>
 79c:	e3530000 	cmp	r3, #0
 7a0:	159f000c 	ldrne	r0, [pc, #12]	; 7b4 <register_fini+0x20>
 7a4:	1bffff49 	blne	4d0 <atexit>
 7a8:	e8bd4008 	pop	{r3, lr}
 7ac:	e12fff1e 	bx	lr
 7b0:	00000930 	.word	0x00000930
 7b4:	000007b8 	.word	0x000007b8

000007b8 <__libc_fini_array>:
 7b8:	e92d4038 	push	{r3, r4, r5, lr}
 7bc:	e59f5030 	ldr	r5, [pc, #48]	; 7f4 <__libc_fini_array+0x3c>
 7c0:	e59f4030 	ldr	r4, [pc, #48]	; 7f8 <__libc_fini_array+0x40>
 7c4:	e0654004 	rsb	r4, r5, r4
 7c8:	e1b04144 	asrs	r4, r4, #2
 7cc:	10855104 	addne	r5, r5, r4, lsl #2
 7d0:	0a000004 	beq	7e8 <__libc_fini_array+0x30>
 7d4:	e5353004 	ldr	r3, [r5, #-4]!
 7d8:	e1a0e00f 	mov	lr, pc
 7dc:	e12fff13 	bx	r3
 7e0:	e2544001 	subs	r4, r4, #1
 7e4:	1afffffa 	bne	7d4 <__libc_fini_array+0x1c>
 7e8:	eb000050 	bl	930 <__libc_fini>
 7ec:	e8bd4038 	pop	{r3, r4, r5, lr}
 7f0:	e12fff1e 	bx	lr
 7f4:	00000948 	.word	0x00000948
 7f8:	0000094c 	.word	0x0000094c

000007fc <__cs3_premain>:
 7fc:	e92d4008 	push	{r3, lr}
 800:	eb00001d 	bl	87c <__libc_init_array>
 804:	e59f3030 	ldr	r3, [pc, #48]	; 83c <__cs3_premain+0x40>
 808:	e3530000 	cmp	r3, #0
 80c:	15930000 	ldrne	r0, [r3]
 810:	01a00003 	moveq	r0, r3
 814:	e59f3024 	ldr	r3, [pc, #36]	; 840 <__cs3_premain+0x44>
 818:	e3530000 	cmp	r3, #0
 81c:	15931000 	ldrne	r1, [r3]
 820:	01a01003 	moveq	r1, r3
 824:	e3a02000 	mov	r2, #0
 828:	ebfffef6 	bl	408 <main>
 82c:	e59f3010 	ldr	r3, [pc, #16]	; 844 <__cs3_premain+0x48>
 830:	e3530000 	cmp	r3, #0
 834:	1bffff2d 	blne	4f0 <exit>
 838:	eafffffe 	b	838 <__cs3_premain+0x3c>
	...
 844:	000004f0 	.word	0x000004f0

00000848 <_exit>:
 848:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 84c:	e3a00018 	mov	r0, #24
 850:	e59f1004 	ldr	r1, [pc, #4]	; 85c <_exit+0x14>
 854:	ef123456 	svc	0x00123456
 858:	eafffffe 	b	858 <_exit+0x10>
 85c:	00020026 	.word	0x00020026

00000860 <__cs3_isr_interrupt>:
 860:	eafffffe 	b	860 <__cs3_isr_interrupt>

00000864 <__cs3_isr_undef>:
 864:	eafffffe 	b	864 <__cs3_isr_undef>

00000868 <__cs3_isr_swi>:
 868:	eafffffe 	b	868 <__cs3_isr_swi>

0000086c <__cs3_isr_pabort>:
 86c:	eafffffe 	b	86c <__cs3_isr_pabort>

00000870 <__cs3_isr_dabort>:
 870:	eafffffe 	b	870 <__cs3_isr_dabort>

00000874 <__cs3_isr_irq>:
 874:	eafffffe 	b	874 <__cs3_isr_irq>

00000878 <__cs3_isr_fiq>:
 878:	eafffffe 	b	878 <__cs3_isr_fiq>

0000087c <__libc_init_array>:
 87c:	e92d4070 	push	{r4, r5, r6, lr}
 880:	e59f506c 	ldr	r5, [pc, #108]	; 8f4 <__libc_init_array+0x78>
 884:	e59f606c 	ldr	r6, [pc, #108]	; 8f8 <__libc_init_array+0x7c>
 888:	e0656006 	rsb	r6, r5, r6
 88c:	e1b06146 	asrs	r6, r6, #2
 890:	12455004 	subne	r5, r5, #4
 894:	13a04000 	movne	r4, #0
 898:	0a000005 	beq	8b4 <__libc_init_array+0x38>
 89c:	e5b53004 	ldr	r3, [r5, #4]!
 8a0:	e2844001 	add	r4, r4, #1
 8a4:	e1a0e00f 	mov	lr, pc
 8a8:	e12fff13 	bx	r3
 8ac:	e1560004 	cmp	r6, r4
 8b0:	1afffff9 	bne	89c <__libc_init_array+0x20>
 8b4:	e59f5040 	ldr	r5, [pc, #64]	; 8fc <__libc_init_array+0x80>
 8b8:	e59f6040 	ldr	r6, [pc, #64]	; 900 <__libc_init_array+0x84>
 8bc:	e0656006 	rsb	r6, r5, r6
 8c0:	eb000012 	bl	910 <_init>
 8c4:	e1b06146 	asrs	r6, r6, #2
 8c8:	12455004 	subne	r5, r5, #4
 8cc:	13a04000 	movne	r4, #0
 8d0:	0a000005 	beq	8ec <__libc_init_array+0x70>
 8d4:	e5b53004 	ldr	r3, [r5, #4]!
 8d8:	e2844001 	add	r4, r4, #1
 8dc:	e1a0e00f 	mov	lr, pc
 8e0:	e12fff13 	bx	r3
 8e4:	e1560004 	cmp	r6, r4
 8e8:	1afffff9 	bne	8d4 <__libc_init_array+0x58>
 8ec:	e8bd4070 	pop	{r4, r5, r6, lr}
 8f0:	e12fff1e 	bx	lr
 8f4:	00000928 	.word	0x00000928
 8f8:	00000928 	.word	0x00000928
 8fc:	00000928 	.word	0x00000928
 900:	00000930 	.word	0x00000930

Disassembly of section .rodata:

00000908 <_global_impure_ptr>:
 908:	00000970 00000043                       p...C...

00000910 <_init>:
 910:	e1a0c00d 	mov	r12, sp
 914:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 918:	e24cb004 	sub	r11, r12, #4
 91c:	e24bd028 	sub	sp, r11, #40	; 0x28
 920:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 924:	e12fff1e 	bx	lr

00000928 <__init_array_start>:
 928:	00000794 	.word	0x00000794

0000092c <__frame_dummy_init_array_entry>:
 92c:	00000208                                ....

00000930 <__libc_fini>:
 930:	e1a0c00d 	mov	r12, sp
 934:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 938:	e24cb004 	sub	r11, r12, #4
 93c:	e24bd028 	sub	sp, r11, #40	; 0x28
 940:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 944:	e12fff1e 	bx	lr

00000948 <__fini_array_start>:
 948:	000001c4 	.word	0x000001c4

0000094c <__cs3_regions>:
	...
 958:	00000da0 	.word	0x00000da0
 95c:	00000020 	.word	0x00000020
